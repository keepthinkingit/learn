* Advanced Vue Component Design

** DONE Building Controlled Component
   CLOSED: [2018-07-13 Fri 13:04]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 13:04]
   Learn the fundamentals of component communication best practices, and how you can use that knowledge to create you own components that work with Vue's v-model dricetive.
  [[/Users/yjh/Documents/tutorials/advanced-vue/1. Building Controlled Components.mp4][File]], [[https://codesandbox.io/s/oxxlx055xy?from-embed][Code]]
  - =aria-checked= attributes can set the checkbox component
  - the fundamental of =v-model= is *<input :value="some-value" @input="$event.target.value"></input>*

** DONE Customizing Controlled Component Bindings
   CLOSED: [2018-07-13 Fri 13:35]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 13:35]
   Learn how to customize =v-model= so you can use more expressive names in your controlled components.
   [[~/Documents/tutorials/advanced-vue/2. Customizing Controlled Component Bindings.mp4][File]], [[https://codesandbox.io/s/mqnzm84plx?from-embed][Code]]
   #+BEGIN_SRC js
     export default {
         model: {
             prop: "toggle", // default "value"
             event: "toggle", // default "input"
         }
     }
   #+END_SRC



** DONE Wrapping External Libraries as Vue Components
   CLOSED: [2018-07-13 Fri 14:07]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 14:07]
   There's a lot of high quality libraries out there designed to be used as just vanilla JS or as jQuery plugins. In this lesson your'll learn how to turn those libraries into Vue components so you can maintain a single JS paradigm within your own applications
   [[~/Documents/tutorials/advanced-vue/3. Wrapping External Libraries as Vue Components.mp4][File]], [[https://codesandbox.io/s/n4qolyr42m?from-embed][Code]]
   - [[https://github.com/dbushell/Pikaday][Pikaday]]
   - =...this.options= merge the options to the external libraries.

** DONE Encapsulating External Behavior: Closing on Escape
   CLOSED: [2018-07-13 Fri 14:28]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 14:28]
   In this lesson you'll learn and how it can sometimes be useful to break outside of Vue's built-in event handling system to write more portable components.
   [[~/Documents/tutorials/advanced-vue/4. Encapsulating External Behavior: Closing on Escape.mp4][File]], [[https://codesandbox.io/s/1v1o4lvp9j?from-embed][Code]]
   - let =div= or other element can focus, add the =tabindex= attribute to it.
   - After Vue re-rendered, focus the needed element.
     #+BEGIN_SRC js
       this.$nextTick(() => {
           this.$refs.modal.focus()
       })
     #+END_SRC
   - Create global event listener, and remove event listener - Method 1
     #+BEGIN_SRC js
       export default {
           created() {
               this.escapeHandler = (e) => {
                   if (e.key === 'Escape' && this.show) {
                       this.dismiss()
                   }
               }
               document.addEventListener('keydown', this.escapeHandler)
           },

           destroyed() {
               document.removeEventHandler('keydown', this.escapeHandler)
           }
       }
     #+END_SRC
   - Method 2
     #+BEGIN_SRC js
       export default {
           created() {
               const escapedHandler = (e) => {
                   if (e.key === 'Escape' && this.show) {
                       this.dismiss()
                   }
               }
               document.addEventListener('keydown', escapeHandler)
               this.$once('hook:destroyed', () => {
                   document.removeEventListener('keydown', escapeHandler)
               })
           }
       }
     #+END_SRC
** DONE Encapsulating External Behavior: Background Scrolling
   CLOSED: [2018-07-13 Fri 14:44]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 14:44]
   Like event handling, sometimes you need to bypass Vue's activity system and do old-scroll DOM manipulation to keep a component's logic encapsulated. This lesson will teach you how and when to do it.
   [[~/Documents/tutorials/advanced-vue/5. Encapsulating External Behavior: Background Scrolling.mp4][File]], [[https://codesandbox.io/s/z0mx3w9km?from-embed][Code]]
   - Set the screen locked
     #+BEGIN_SRC css
       .model-open {
           height: 100vh;
           overflow: hidden;

       }
     #+END_SRC
   - Set the body style property, and watch the value immediately
     #+BEGIN_SRC js
       export default {
           watch: {
               show: {
                   immediate: true,
                   handler: function (show) {
                       if (show) {
                           this.preventBackgroundScrolling && document.body.style.setProperty('overflow', 'hidden');
                       } else {
                           this.preventBackgroundScrolling && document.body.style.removeProperty('overflow')
                       }
                   }
               }
           }
       }
     #+END_SRC
** Encapsulating External Behavior: Portals
   When a single interaction involves multiple disconnected parts of the DOM(think a button that opens a modal that lives at the end of the body), a component's implementation details can quickly leak to other parts of your application and cause unnecessary coupling. Learn how you can use the portal pattern to avoid this.
   [[~/Documents/tutorials/advanced-vue/6. Encapsulating External Behavior: Portals.mp4][File]], [[https://codesandbox.io/s/vy0k8283o5?from-embed][Code]]

** Encapsulating External Behavior: Reusing Portals
   Learn how to reuse generic portal targets to avoid leaking knowledge to the root component about what's actually being rendered.
   [[~/Documents/tutorials/advanced-vue/7. Encapsulating External Behavior: Reusing Portals.mp4][File]], [[https://codesandbox.io/s/xv1ooy9v1p?from-embed][Code]]

** Injecting Content Using Slots
   Learn the fundamentals of using slots to customize a component's content.
   [[~/Documents/tutorials/advanced-vue/8. Injecting Content Using Slots.mp4][File]], [[https://codesandbox.io/s/8x54ow4vl9?from-embed][Code]]

** Native-Style Buttons Using Slots and Class Merging
   In this lesson, you'll learn how to apply our knowledge of slots to build a custom button component that behaves just like a native HTML element.
   [[~/Documents/tutorials/advanced-vue/9. Native-Style Buttons Using Slots and Class Merging.mp4][File]], [[https://codesandbox.io/s/j4m180n11v?from-embed][Code]]

** Extending Components Using Composition
   You'll often have situations in an application where two cmoponents share quite a bit of logic but alse have a few notable differences. In these lession, you'll learn how slots can be used to "extend" a common base component using compositions, instead of resorting to mixins or inheritance.
   [[~/Documents/tutorials/advanced-vue/10. Extending Components Using Composition.mp4][File]], [[https://codesandbox.io/s/jj8vjjxlk9?from-embed][Code]]

** Passing Data Up Using Scoped Slots
   Scoped slots are easily one of Vue's powerful features, but can be a bit tricky to wrap your head around. In this lesson, you'll learn how to see scoped slots as callback props, making them a lot easier to understand.
   [[~/Documents/tutorials/advanced-vue/11. Passing Data Up Using Scoped Slots.mp4][File]], [[https://codesandbox.io/s/nwz1xpkyl0?from-embed][Code]]

** Render Functions 101
   For most components you will use templates to contruct your html, but Vue also supports building a components's HTML using /reder/ functions. In this mini-series, you'll learn how reander functions work and why there are still useful even if you aren't using JSX.
   [[~/Documents/tutorials/advanced-vue/12. Render Functions 101.mp4][File]], [[https://codesandbox.io/s/5vxlz052px?from-embed][Code]]

** Render Functions and Components
   In this lesson you'll learn how to render other components from inside of a render function.
   [[~/Documents/tutorials/advanced-vue/13. Render Functions and Components.mp4][File]], [[https://codesandbox.io/s/k05o3npx25?from-embed][Code]]

** Render Functions and Children
   In this lesson you'll learn how to write render functions that contain multiple children, and how to replace directives like v-for using array transformations.
   [[~/Documents/tutorials/advanced-vue/14. Render Functions and Children.mp4][File]], [[https://codesandbox.io/s/7w1pr58p6x?from-embed][Code]]

** Render Functions and Slots
   Learn how to interact with slots inside of render functions, and how a special property of render functions that template doesn't support can open up a lot of new component design possibilites.
   [[~/Documents/tutorials/advanced-vue/15. Render Functions and Slots.mp4][File]], [[https://codesandbox.io/s/z2k1j94o8m?from-embed][Code]]

** Data Provider Components
   Using render functions and scoped slots, components don't have to generate any of their own HTML. Learn how to leverage this concept to build a component FetchJson component that can be used to make AJAX calls directly in your markup.
   [[~/Documents/tutorials/advanced-vue/16. Data Provider Components.mp4][File]], [[https://codesandbox.io/s/nk9qr8yz0p?from-embed][Code]]

** Getting Started with Renderless UI Components
   One of the biggest headaches with traditional JS UI libraries is that they are a pain to customize. In this mini-series, you'll learn how to use render functions and scoped slots to separate presentation and behavior into separate components; making it easy to cmopletely customize a component's appearance without reimplementing any logic.
   [[~/Documents/tutorials/advanced-vue/17. Getting Started with Renderless UI Components.mp4][Code]], [[https://codesandbox.io/s/x1z0myl0p?from-embed][File]]

** Passing Data Props from Renderless Components
   Slot props come in three general flavors. In this lesson you'll learn about "data props" and how use them.
   [[~/Documents/tutorials/advanced-vue/18. Passing Data Props from Renderless Components.mp4][Code]], [[https://codesandbox.io/s/k96ljlz7yv?from-embed][File]]

** Passing Actions Props from Renderless Components
   In this lesson you'll learn about "action props", and how they can be used to provide behavior to a parent component.
   [[~/Documents/tutorials/advanced-vue/19. Passing Action Props from Renderless Components.mp4][Code]], [[https://codesandbox.io/s/9l2jwy14mp?from-embed][File]]

** Passing Binding Props from Renderless Components
   In this lesson you'll learn about "binding props", which let you attach prop and event bindings to a parent element, while keeping all of the implementation details encapsulated inside the child component.
   [[~/Documents/tutorials/advanced-vue/20. Passing Binding Props from Renderless Components.mp4][File]], [[https://codesandbox.io/s/l5yoxyv02q?from-embed][Code]]

** Renderless UI Components: Functions as Binding Props
   Sometimes bindings props need context to work correctly. Learn how to use functions as "lazy" binding props that can accept parameters from the parent.
   [[~/Documents/tutorials/advanced-vue/21. Renderless UI Components: Functions as Binding Props.mp4][File]], [[https://codesandbox.io/s/kn1nv6ypv?from-embed][Code]]

** Implementing Alternate Layouts with Renderless Components
   In this lesson we'll take the renderless component we've built throughout the previous five lessons and use it to implement a drastically different layout, without write any of the component logic.
   [[~/Documents/tutorials/advanced-vue/22. Implementing Alternate Layouts with Renderless Components.mp4][File]], [[https://codesandbox.io/s/1r789z3nnl?from-embed][Code]]

** Configuring Renderless Components
   Scoped slots are ideal for customizing how a component look, but it still make sense to use configuration to customize a component's behavior. In this lesson we'll add a configuration prop to our renderless component to change it functionality.
   [[~/Documents/tutorials/advanced-vue/23. Configuring Renderless Components.mp4][File]], [[https://codesandbox.io/s/l9v91jn0zq?from-embed][Code]]

** Wrapping Renderless Components
   Renderless components create a lot of work for the consumer compared to a traditional component that combines presentation and behavior in one unit. Learn how to create opinionated wrapper components that ease the burden on the consumer while still providing the flexibility of renderless components when needed.
   [[~/Documents/tutorials/advanced-vue/24. Wrapping Renderless Components.mp4][File]], [[https://codesandbox.io/s/5z5056yoq4?from-embed][Code]]

** Element Queries as a Data Provider Component
   In this lesson, we'll use the data provider component pattern to write a transparent wrapper component that can be used to give a component access to its current dimessions, which we can then use to customize how that component looks based on the space available to it.
   [[~/Documents/tutorials/advanced-vue/25. Element Queries as a Data Provider Component.mp4][File]], [[https://codesandbox.io/s/20r8wnx44r?from-embed][Code]]

** Building Compound Components with Provide/Inject
   There are certain types of components that have multiple related pieces, like tabs and tab panels, or items in an accordion list. Learn how to use Vue's provide and inject features to make it possible for these related components to communicate without forcing the consumer to wire everything up mannually.
  [[~/Documents/tutorials/advanced-vue/26. Building Compound Components with Provide and Inject.mp4][File]], [[https://codesandbox.io/s/jl6pz69ox3?from-embed][Code]]

** Building a Compound Sortable List Component
   In this lesson, we'll combine a lot of the pattern's we've used so far to build a compound, renderless, controlled sortable list component that also wrap up an external library. It's the kitchen of component design!
   [[~/Documents/tutorials/advanced-vue/27. Building a Compound Sortable List Component.mp4][File]], [[https://codesandbox.io/s/o98y1l735y?from-embed][Code]]

** Building a Search Select: Data Bindings
   In this mini-series, we'll build a robust search select component by applying the principles covered through the reset of the coures.
   [[~/Documents/tutorials/advanced-vue/28. Building a Search Select: Data Bindings.mp4][File]], [[https://codesandbox.io/s/ykypmk03xj?from-embed][Code]]

** Building a Search Select: Filtering
   In this lesson we'll add filtering support to the search select, working through all of the edge cases to make sure it behaves intuitively.
   [[~/Documents/tutorials/advanced-vue/29. Building a Search Select: Filtering.mp4][File]], [[https://codesandbox.io/s/oozwlvk36?from-embed][Code]]
** Building a Search Select: Focus Management
   In this lesson we'll tackle focus management, making sure that the search is focus when the component is opened and the trigger is re-focused when the component closes.
   [[~/Documents/tutorials/advanced-vue/30. Building a Search Select: Focus Management.mp4][File]], [[https://codesandbox.io/s/o95oq681l6?from-embed][Code]]

** Building a Search Select: Making It Controlled
   In this lesson we'll convert the search select into a controlled component, pushing the state into the parent. We'll also make the filtering logic controllable from the outside.
   [[~/Documents/tutorials/advanced-vue/31. Building a Search Select: Making It Controlled.mp4][File]], [[https://codesandbox.io/s/8n0mnm2v70?from-embed][Code]]

** Building a Search Select: Keyboard Navigation
   In this lesson we'll add comprehensive keyboard navigation to the search select, including handling things like scrolling highlighted items into view.
   [[~/Documents/tutorials/advanced-vue/32. Building a Search Select: Keyboard Navigation.mp4][File]], [[https://codesandbox.io/s/n7mw5871v0?from-embed][Code]]

** Building a Search Select: Click Outside Component
   In this lesson we'll make it possible to close the search select by clicking outside of it, but with a catch: we implement this behavior from scratch as its own renderless component, not using an existing directive-based library.
   [[~/Documents/tutorials/advanced-vue/33. Building a Search Select: Click Outside Component.mp4][File]], [[https://codesandbox.io/s/w66mzknr27?from-embed][Code]]

** Building a Search Select: Intergrating Propper.js
   In this lesson, we'll intergrate Propper.js with our search selelct component so that dropdown position reacts inteligently to the size and scroll position of the viewport.
   [[~/Documents/tutorials/advanced-vue/34. Building a Search Select: Integrating Popper.js.mp4][File]], [[https://codesandbox.io/s/vyxl1z5pp5?from-embed][Code]]
