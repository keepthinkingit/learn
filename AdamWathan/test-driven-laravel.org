* Getting the Ball Rolling
** DONE What Do We Build First
   CLOSED: [2018-08-13 Mon 16:53]
   - State "DONE"       from "STARTED"    [2018-08-13 Mon 16:53]
   First of all, welcome to Test-Driven Laravel!
   To get things started, let's talk a bit about the app we are going to build, and figure out where we should start.
   [[~/Documents/tutorials/test-driven-laravel/1-getting-the-ball-rolling/1-what-do-we-build-first.mp4][1-what-do-we-build-first.mp4]]
** DONE Sketching out Our First Test
   CLOSED: [2018-08-13 Mon 17:13]
   - State "DONE"       from "STARTED"    [2018-08-13 Mon 17:13]
   In this lesson, we scaffold out a new application and start sketching out the first test.
   *Important note*
   We start the course with Laravel 5.3 which was the current version at the time of recording. If you want to follow along line-by-line, I recommend that you start with a fresh 5.3 project, and upgrade to 5.4 and beyong we do it in the course.
   To create a fresh Laravel 5.3 project, run this in your terminal.
   =composer create-project laravel/laravel=5.3.* ticketbeast=
   If you'd like to start with Laravel 5.4(or even 5.5), I recommand watching the upgrade videos first so you have an idea of what differences you need to watch out for.


   - Tests
     - =user_can_view_a_concert_listing= in =ViewConcertListing Test=
       - Arrange
         Create a Project
       - Act
         View the concert listing
       - Assert
         See the concert details

** DONE Getting to Green
   CLOSED: [2018-08-13 Mon 17:54]
   - State "DONE"       from "TODO"       [2018-08-13 Mon 17:54]
   In this lesson, we use TDD to scaffold out a lot of the boiler plate in the application and get our first test passing.

   - Summary
     - One test drive one line code.

** DONE Unit Testing Presentation Logic
   CLOSED: [2018-08-14 Tue 12:57]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 12:57]
   In this lesson, we drive out some presentation helpers via unit tests to extract some logic from our view.

   - Tests
     - =can_get_formatted_date= in =ConcertTest= =unit=

   - Summary
     - Use Laravel =factory= to create test data
     - Use =get<item>Attribute= magic method to dynamic get attribute.
** DONE Refactoring For Speed
   CLOSED: [2018-08-14 Tue 16:25]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 16:25]
   In this lesson, we finish extracting some presentation helpers, then refactor our tests to run without using the database to keep thing fast.

   - Tests
     - =can_get_formatted_start_time= in =ConcertTest= =unit=
     - =can_get_ticket_price_in_dollars= in =ConcertTest= =unit=
   - Summary
     - =create= and =make= differences

** DONE Hiding Unpublished Concerts
   CLOSED: [2018-08-14 Tue 16:37]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 16:37]
   In this lesson, we introduce the idea of "published" and "unpublished" concerts, and hide unpblished concerts from visitors to the site.

   - Tests
     - =user_cannot_view_unpublished_concert_listings= in =ViewConcertListingTest= =feature=

   - Summary
     - =published= and =unpublished=
       =publish=true/false= vs =published_at=timestamps/null=
     - =assertResponseStatusCode()=
     - =whereNotNull= eloquent query
     - =get()= vs =visit()= method to get the endpoint in test

** DONE Testing Query Scopes
   CLOSED: [2018-08-14 Tue 16:51]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 16:51]
   In this lesson, we extract some query logic to a custom scope and ensure that it's covered by our tests.

   - Tests
     - change =user_can_view_a_concert_listing= to =user_can_view_a_published_concert_listing=
     - =concerts_with_a_published_at_date_are_published=

   - Summary
     - Encapsulate model query from controller to query scope.

** DONE Factory States
   CLOSED: [2018-08-14 Tue 16:58]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 16:58]
   In this lesson, we abstract some details about makes a concert "published" from our tests by encapsulating them in a factory state.

   - Summary
     - factory state =$factory->state(App\Concert::class, 'published', closure)=

* Purchasing Concert Tickets
** DONE Intro
   CLOSED: [2018-08-14 Tue 17:00]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 17:00]
   In this lesson, we talk about getting started with the "Purchasing Concert Tickets" feature that we're going to implement next.

** DONE Browser Testing vs Endpoint Testing
   CLOSED: [2018-08-14 Tue 17:28]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 17:28]
   In this lesson, we talk about the trade-offs involved in testing through the browser vs. testing endpoint directly, and why you might choose one option over the other.

   - Summary
     - What do I want from my tests?
       1. Confidence that the system works
       2. Reliable, don't break for unimportant reasons.
       3. Fast, so I run them often.
       4. Simple, as few tools as possible, easy to recreate test environment.

** DONE Outlining the First Purchasing Test
   CLOSED: [2018-08-14 Tue 17:39]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 17:39]
   In this lesson, we design our initial "customer can purchase concert tickets" test.

   - Tests
     - =customer_can_purchase_concert_tickets= in =PurchaseTicketsTest=
   - Summary
     - =$this->json('POST', '/endpoint', [data])= use json to visit an endpoint.
     - Use test as a playground to play with code.

** DONE Faking the Payment Gateway
   CLOSED: [2018-08-15 Wed 12:42]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 12:42]
   In this lesson, we create a fake implementation of our payment gateway to avoid hitting Stripe during our intergration tests.

   - Tests
     - =charges_with_a_valid_payment_token_are_successful= in =FakePaymentGateWayTest= =unit=
   - Summary
     - Down to unit test to implement FakePaymentGateWay methods
     - =$this->app->instance('<interface>', 'instance')= Laravel bind instance to interface.

** DONE Adding Tickets to Orders
   CLOSED: [2018-08-15 Wed 14:12]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 14:12]
   In this lesson, we work on creating tickets and attaching them to orders when a customer make a purchase.

   - Summary
     - Use the =hasMany= snippets
     - Use the =range(1, $quantity)= php method in =foreach= to create the quantily tickets.

** DONE Encapsulating Relationship Logic in the Model
   CLOSED: [2018-08-15 Wed 14:19]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 14:19]
   In this lesson, we work on refactoring some of our controller code and pushing some logic into the model.

   - Tests
     - =can_order_concert_tickets= in =ConcertTest= =unit=

** DONE Getting Started with Validation Testing
   CLOSED: [2018-08-15 Wed 14:29]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 14:29]
   In this lesson, we work on testing and implementing some request validation rules.

   - Tests
     - =email_is_required_to_purchase_tickets= in =PurchaseTicketsTest= =feature=
   - Summary
     - Use =disabledExceptionHandling= to toggle Laravel exception handle.
     - =$this->decodeResponseJson= in test to decode response data to json.

** DONE Reducing Duplication with Custom Assertion
   CLOSED: [2018-08-15 Wed 14:42]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 14:42]
   In this lesson, we abstract some commonly paired assertions behind a custom assertion with a more expressive name.

   - Summary
     - Encapsulate the post method and parameters to a dedicated method
     - Encapsulate validation assert to a dedicated method =assertValidationError=

** DONE Handling Failed Charges
   CLOSED: [2018-08-15 Wed 14:53]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 14:53]
   In this lesson, we drive out what should happen when a customer's payment fails.

   - Tests
     - =an_order_is_not_created_if_payment_fails= in =PurchaseTicketsTest= =feature=
     - =charges_with_an_invalid_payment_token_fail= in =FakePaymentGateWayTest= =unit=
   - Summary
     - Use =try-catch= block in the tests for having change to handling the exception

** DONE Preventing Tickets Sales to Unpublished Concerts
   CLOSED: [2018-08-15 Wed 15:04]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 15:04]
   In this lesson, we add a new feature test to cover the situation when someone tries to view a concert that hasn't been published yet.

   - Tests
     - =cannot_purchase_tickets_to_an_unpublished_concert= in =PurchaseTicketsTest= =feature=
     - change =customer_can_purchase_concert_tickets= to =customer_can_purchase_to_a_published_concert=
   - Summary
     - =findOrFail= convert to 404 exception

* Limiting Tickets Sales

** DONE Outlining the First Test Case
   CLOSED: [2018-08-15 Wed 15:18]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 15:18]
   In this lesson, we work on writing a test to ensure that customers can't purchase more tickets than are still available

   - Tests
     - =cannot_purchase_more_tickets_than_remain= in =PurchaseTicketsTest= =feature=
** DONE Adding Tickets to Concerts
   CLOSED: [2018-08-15 Wed 15:30]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 15:30]
   In this lesson, we implement the ability to add tickets to concerts so there are tickets available when a customer tries to purchase.

   - Tests
     - =can_add_tickets= in =ConcertTest= =unit=
     - =tickets_remaining_does_not_include_tickets_associated_with_an_order= in =ConcertTest= =unit=

** DONE Refusing Orders When There Are No More Tickets
   CLOSED: [2018-08-15 Wed 15:48]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 15:48]
   In this lesson, we work on making sure orders are not created when someone tries to purchase more tickets than remain, and ensuring that a customer can't purchase tickets already purchased by another customer.

   - Tests
     - =trying_to_purchase_more_tickets_than_remain_throws_an_exception= in =ConcertTest= =unit=
     - =cannot_order_tickets_that_have_already_been_purchasedA in =ConcertTest== =unit=
   - Summary
     - =$this->fail('message')= in the =fail= method add the failed message.

** DONE Finish the Feature Test
   CLOSED: [2018-08-15 Wed 15:54]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 15:54]
   In this lesson, we get our "cannot purchase more tickets than remain" feature test passing by finishing our controller implementation.

** DONE Cancelling Failed Orders
   CLOSED: [2018-08-15 Wed 16:03]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 16:03]
   In this lesson, we make sure that if a customer's payment fails, we cancel their order.

   - Tests
     - =tickets_are_released_when_order_is_cancelled= in =OrderTest= =unit=
   - Summary
     - assert status in arrange state.

** DONE Refactoring and Redundant Test Coverage
   CLOSED: [2018-08-15 Wed 16:18]
   - State "DONE"       from "STARTED"    [2018-08-15 Wed 16:18]
   In this lesson, we extract some logic from our Order class to Tickets class, and discuss whether or not it's important to add new test coverage.

   - Tests
     - =a_ticket_can_be_released= in =TicketsTest= =unit=
   - Summary
     - =fresh()= method in tests

** Cleaning Up Our Tests
   Much like production code, test code needs to be refactored and kept healthy and maintainable.
   In this lesson, we go over our existing test suite and look for opportunities to clean it up.

* Returning Order Details
** Asserting Against JSON Response
  In this lesson, we add tests to ensure that we are getting back meaniningfully order information after purchasing tickets, and discuss different strategies for testing JSON response.

** Returning Order Details
   In this lesson, we work on getting our existing feature test passing by driving out an order's JSON representation at the unit level.

** This Design Sucks
   You don't awlays write beautiful code on the first try.
   In this lesson, we talks about three issues with our existing design and why they are worth addressing.

* A Surgical Refactoring
** Persisting the Order Amount
  In this lesson, we work on persisting the order amount to the database, instead of calculating it on the fly based on tickets price and tickets quantitly.

** Removing the Need to Cancel Orders
   In this lesson, we work getting rid of the need to cancel orders when a payment fails by separating the idea of finding tickets from confirming an order.

** Preparing for Extraction
   In this lesson, we work on removing the need to create orders through a concert by removing a redundant relationship.

** Extracting a Named Constructor
   In this lesson, we introduced a named constructor for creating orders from customer details and tickets.

** Precomputing the Order Amount
   In this lesson, we work on removing the need for an order to know how to calculate it's own price so we can eliminlate some duplication in our code.

** Uncovering a New Domain Object
   In this lesson, we walk through a strategy I use to discover new objects in my code, and start driving out a new domain object with tests.

** You Might Not Need a Mocking Framework
   In this lesson, we work on removing the need to migrate the database when testing our simple Reservation class.
   We also talk about different approaches to isolating the Reservation from it's collaborators, and why you might not need a special library to do it.

* Off to the Races
**  Uh Oh, a Race Condition!
   Over the last few lessons we've improved the design of our code significantly, but we've also introduced a race condition.

** Requestception
   In this lesson, we discuss how subrequests work, and how we can use them to help test this race condition.

** Hooking into Charges
   In this lesson, we add a hook to our fake payment gateway to allow us to trigger a nested request.

** Uh Oh, a Segfault!
   In this lesson, we finish wrting our feature test to cover the race condition. But when we run it, we hit a segfault! Let's see if we can diagnose the issue.

** Replicating the Failure at the Unit Level
   In order to get a better understanding of our segfault issue, we try and replicate it at the unit level so we can fix it more easily.

** Reserving Individual Tickets
   To make sure nobody can purchase someone else's tickets while they are still trying to pay, we work on introducing the idea of a ticket being "reserved".

** Reserved Means Reserved
   In this lesson, we work on making sure the rest of the application respects our newly introduced "reserved" status on tickets.

** That Guy Stole My Tickets
   For some reason, person B is getting their name added to tickets that person A paid for! Let's figure out what's going on.

* Hunting for Stale Code

** Cancelling Reservation
   In this lesson, we find a sneaky bug and work towards solving it through an isolated unit test.

** Refactoring Mockes to Spies
   In this lesson, we talk about 3 different ways to create mock objects, as well as how using spies instead of mocks can help keep your tests more organized.

** A Change in Behavior
   Our feature test is still failing because some of our order code has a different understanding of what it means to "releases" tickets.
   In this lesson, we diagnose the issue and update our specification to help us drive out the change in behavior.

** Deleting Stale Tests
   In this lesson, we discuss the importance of high level feature tests, and how they help give use the confidence to delete stale code when confronted with a failing unit test.


* Something Smells in Our Controllers
** Cleaning Up a Loose Variable
   In this lesson, we look to eliminate a loose variable in our controller by adding some additional behavior to our Reservation class, and then spend some time pushing the responsibility for creating reservations inside our Concert class and our of our controller.

** Moving the Email to Reservation
   In this lesson, we notice a long parameter list we'd like to refactor, but in order to do that, we need to tweak how reservations are created so that reservation has knowledge of the customer who is reserving the tickets.

** Refactoring "Long Parameters List" Using "Preserve Whole Object"
   In this lesson, we attempt to refactor the "long parameter list" code smell we noticed in our Order class using the "preserve whole object" refactoring.

** Green with Feature Envy
   Our "preserve whole object" refactoring didn't turn out as nicely as we hoped.
   In this lesson, we look to treat the original problem as a "feature envy" issue instead of a "long parameter list" issue, and see if that leads us to a better solution.

** Avoiding Service Classes with Method Injection
   In this lesson, we notice that we're lacking a single source of truth for the amount we charge the customer and the amount used to create the new order.
   We walk through what it might look like to solve this problem with a service class, and then how we can avoid the service class entirely using method injection.

* Testing-Driving the Real Stripe Adapter

** Generating a Valid Payment Token
   In this lesson we scaffold out an initial test for our StripePaymentGateway and figure out how to generate a valid payment token using Stripe's API.

** Retriving the Last Charge
   In this lesson we use Stripe's API to fetch the most recent charge so we can make assertions about it in our test.

** Making a Successful Charge
   In this lesson we work through the first set of test failures and successfully make a charge to Stripe.

** Dealing with Lingering State
   In this lesson we diagnose why are test is passing after commenting out our implementation, and come up with a new strategy to run our tests with isolated data.

** Don't Mock What You Don't Own
   A commpon miscoception about testing is that you should mock calls to external APIs to avoid the newwork.
   In this lesson, we compare the pros and cons of intergrating with Stripe vs. mocking our calls to Stripe to better understand why shouldn't mock third-party code.

** Using Groups to Skip Intergration Tests
   In this lesson, we use PHPUnit's "group" feature to make it easy to skip our intergration tests when we don't have an internet connection.

** Handling Invalid Payment Tokens
   In this lesson, we add a new test to make sure our StripePaymentGateway behaves as expected when attempting to charge with an invalid payment token.

** The Moment of Truth
   In this lesson, we finally fire up the browser to find out if all of this TDD stuff has really given us a working system.

* Keeping Things Synchronized with Contract Tests

** When Interfaces Aren't Enough
   In this lesson, we identify some of the risks of using fakes, and why it takes more than an interface to make sure multiple implementations stay in sync.

** Refactoring Forward Duplication
   In this lesson, we begin refactoring the tests for our two PaymentGateway implementations towards being identical so we can extract them to a contract test.

** Capturing Charges with Callbacks
   In this lesson, we come up with a strategies for being able to keep track of the total charges made during a test that will work for both implementations for our PaymentGateway interface.

** Making the Tests Identical
   In this lesson, we port the newChargesDuring method over to the FakePaymentGateways, finally leaving us with two identical tests that are ready for extraction.

** Extracting a Contract Test
   In this lesson, we extract the identical PaymentGateway tests into a contract test, shared through a trait.

** Extracting the Failure Case
   In this lesson, we refactor the =charges_with_an_invalid_payment_token_fail= tests to make them identical, and then extract it to our contract tests.



* Upgrading Our Suit to Laravel 5.4

** Upgrading to Laravel 5.4
   In this lesson, we upgrade TicketBeast to Laravel 5.4, and get our tests back to green using =browser-kit-testing= package.

** Removing the BrowserKit Dependency
   In this lesson, we refactor our BrowserKit tests to use Laravel 5.4's testing features, so we can remove our dependency on the compabitility package.

* Viewing Order Confirmations

** Sketching out Order Confirmations
  In this lesson, we begin driving out our test for viewing order confirmations based on a static mockup.

** Driving out the Endpoint
   In this lesson, we figure out th URL structure we want to use to keep order confirmation pages private, and drive out the ability to successfully hit out new endpoint.

** Asserting Against View Data
   In this lesson, we flesh out an initial implementation of our controller, and walk through how to test the data that is bound to a view without asserting against the rendered HTML.

** Extracting a Finder Method
   In this lesson, we refactor some Eloquent calls in our controller to a dedicated finder method, and discuss when it's important to add new tests while refactoring and when it's not.

** Making Static Data Real
   In this lesson, we work through using tests to replace some of the hard coded data in our mockup with real data that's attached to our order.

** Deciding What to Test in a View
   In this lesson, we spend some time discussing what you need to take into consideraction when deciding what data is important to test in a renderd view.

** Decoupling Data from Presentation

* Generating Confirmation Numbers

** Fixing the Test Suit
   In this lesson, we get our test suit back to green by temporarily making some of our new columns nullable, and discuss adding a test to ensure confirmation numbers are generated for new orders.

** Stubbling the Interface
   In this lesson, we decide we want to able to stub how order confirmation numbres are gerenated for our high level feature test, and use that insight to design an interface where we can encapsulate that logic.

** Updating Our Unit Tests
   In this lesson, we update one of our =Order= unit tests to make use of the factory we added previously, and make sure that orders include their confirmation numbers when we render them as JSON.

** Confirmation Number Characteristics
   In this lesson, we discuss the what we want our confirmation numbers ultimately look like and why.

** Testing the Confirmation Number Format
   In this lesson, we use the characteristics we identified previously to specify how our confirmation numbers should look with a set of unit tests, and work on getting them to pass.

** Ensuring Uniqueness
   In this lesson, we come up with a strategy to force ourselves away from our slimed implementation by testing that each confirmation number is unique.

** Recatoring to a Facade
   In this lesson, we wire up our =RandomOrderConfirmationNumberGenernator= to be the default implementation we use in our application, and make use of Laravel's =Facade= to replace our explict use of Laravel's container in our =order= class with something more expressive.

* Storing the Last Four Card Digists

** Prompting Charges to Objects
   In this lesson, we introduce a new =Charge= object to carry meta data about purchases, such as the last four digits of the card used. We drive out this charge in our =FakePaymentGateway= first through changes to our =PaymentGatewayContractTests=.

** Leveraging Our Contract Tests
   In this lesson, we use our updated contract tests to update the behavior of our StripePaymentGateway to keep it synchronized with our fake.

** Storing Charge Details with Orders
   In this lesson, we update our =OrderTest= to account for creating orders using =Charges= instead of plain amounts, and use that test to drive out the implementation in =order=.

** Deleting More Stale Code
   In this lesson, we notice that changing how =orders= created reveals some lingering old design decisions that are triggering test failures. We work through removing the stale code, and updating any tests we need to keep to no longer rely on the code we want to remove.


* Assigining Ticket Codes

** Feature Test and JSON Updates
   In this lesson, we come up with approach for driving out the generation of ticket codes from the outside in, and make some tweaks to the JSON representation of a completed order.

** Claiming Tickets When Creating Orders
   In this lesson, we decide when ticket codes should be generated, and rework and existing test to use mock expectations to prepare for our implementation.

** Assigining Codes When Claiming Tickets
   In this lesson, we add a new test for the new =claimFor= method in our =Ticket= class, and drive out them implementation.

** The Birthday Problem
   In this lesson, we talk about the birthday problem and the implications it has own how we generate ticket codes.
   We also play with the Hashids library to get an understanding of how we could use it to encode ticket IDs.

** Intergrating Hashids
   In this lesson, we drive out our =HashidsTicketCodeGenerator=, making sure that ticket codes are generated in the format we expect.

** Dealing with Out of Sync Mock
   Uh oh! One of our expectations is no longer in sync with the real implementation.
   In this lesson, we use an underappreciated Mockery feature to detect broken mockes, and get things working properly again.

** Writing It Together
   In this lesson, we bubble back up to our initial feature test and try to get it passing.
   We cover how to return multiple values from a Mockery stub, and wire up our real =HashidsTicketCodeGenerator= in the IOC container to get the test suit back to green.

** Ready to Demo
   In this short lesson, we make a small tweak to our =TicketCheckout= Vue component and finally walk through the entire purchasing flow from start to finish.

* Emailing Order Confirmations

**  Using a Fake to Intercept Email
  In this lesson, we use Laravel's =Mail Fake= to test sending an order confirmation email whenever someone purchases tickets.

** Testing Mailable Contents
   In this lesson, we come up with a way to render mailables as HTML so we can assert against their content.

** Cleanup and Demo
   In this lesson, we configure Mailtrap so we can test our order confirmation email flow in the browser.

* Logging in with Dusk

** Testing the Login Endpoint
   The next thing we'd like to build is the ability for promoters to add new concerts, but before we can do that, we need to give them a way to log in to the application.
   In this lesson, we drive out our initial =/login= endpoint.

** Should You TDD Simple Templates?
   In the last lesson we drove out the login endpoint, but we still don't have an actual login form.
   Is this something we should try to build with TDD, or is there a better approach?

** Namespacing Our Test Suite
   Before we get started with Laravel Dusk, let's update our test folder structure to match which ships with Laravel 5.4 to make it a little easier to integrate.

** Getting Started with Laravel Dusk
   In this lesson, we install and configure =Laravel Dusk=, talk about some gotchas you might run into if you're not approaching it with the right mindset, and get a basic example browser test running.

** QA Testing the Login Flow
   In this lesson, we use Dusk to drive out a browser test for our login form to make sure we have regression coverage.

* Adding New Concerts

** Preventing Guests from Adding Concerts
   In this lesson, we walk through some behind-scenes changes made since the last lesson and work on adding some basic authorization tests.

** Adding a Valid Concert
   In this lesson we drive out the ability to add new concerts and make sure only promoters can access this endpoint.

** Validations and Redirects
   In this lesson we drive out our first validation rule for the concert form, and look at a useful trick for making assertions about =redirect()->back()= behavior.
** Converting Empty Strings to Null
   In this lesson we add a test to prove that concert subtitles are optional, and active some new middleware from Laravel 5.4 to simplify thet task.

** Reducing Noise with Form Factories
   In this lesson we identify a lot of duplication in our validation tests and use a technique similar to model factires to clean up the noise.

** Connecting Promoters to Concerts
   Up until now we've being operating under this assumption that we'd add concerts manually on a promoter's behalf.
   Now that promoters can add concerts themselves, we need to make sure we are tracking who adds each concert so we know who to transfer the ticket money to.

** Autopublishing New Concerts
   In one of the earlist lessons in the course, we added some functionality to make sure that only published concerts were visible in the browser.
   Since we don't have ability to publish new concerts from the UI yet, let's at least make sure that new concerts are published by default until we get to that feature.

* Listing a Promoter's Concerts
** Asserting Against View Objects
   In this lesson we start driving out tests for a concert index page. We also talk about an incredibly useful strategy for making assertions about views without dealting with HTML.

** Avoiding Sort-Sensitive Tests
   In this lesson I outline a small sort-order related trap you can fall into fi you're not careful when asserting against lists of items, and talk about a stratey for avoiding it.

** Refactoring Assertions with Macros
   In this lesson we work through using Laravel's macro feature to create more expressive custome assertions.

* Upaditng Basic Concert Info

** Viewing the Update Form
   In this lesson, I walk through some simple tests I put together behind-the-scenes to give us a head start on updating concerts.

** The First Update Test
   In this lesson, we drive out the first test we need for editing concert details, and talk through a useful naming strategy to use when testing for attribute changes.

** Driving Out Basic Concept Updates
   In this lesson we implement the ability perform concert updates, and start working through some of the permissions checks we need to be concerned with.

** Restricting Updates to Unpublished Concerts
   In this lesson we make sure only unpublished concerts can be edited, prevent guest from editing concerts, and drive out an example validation rule.

* Postponing Ticket Creation

** Storing the Intended Ticket Quantity
   In this lesson we figure out how to deal with updating the ticket quantity by deciding to delay ticket creation until publishing.

** Updating the Other Tests
   In this lesson we walk through some local tests failures caused by our design change and get things back to green.

** Refactoring Away Some Test Duplication
   In this lesson we remove some repetitive setup and assertions by introducing a new test helper.

** Creating Tickets at Time of Publish
   In this lesson we drive out the ability to create tickets at time of publish through our =Concert= unit tests, all while keeping our feature tests passing.

** Custom Factory Classes
   In this lesson we extract some repetitive complex factory setup into a custom =ConcertFactory= class.

* Publish Concert Drafts

** Discoving a New Resource
   In this lesson we talk about three different approaches for exposing the ability to publish concerts through our applications endpoints.

** Creating Published Concerts
   In this lesson we drive out the ability to publish concerts through our new =/published-concerts= resource.

** Adding Concerts without Publishing
   In this lesson we update our existing "add concert" flow to not publish concerts immediately.

** Pushing Logic Out of the View
   Our template is doing a little bit too much work. Let's figure out a way to extract some of that logic into a place that's easier to test.

** More Custom Assertion Fun
   Some of our assertions are looking a little bit overwhelming. Let's create a new custom assertion to make our test a bit more expressive.

* Building the Sales Dashboard

** Calculating Tickets Sold
   In this lesson walk through a few behind-the-scenes changes, then drive out a method for calculating tickets sold.

** Making the Progress Bar Work
   In this lesson we add some methods for calculating the percentage of ticket sold, and touch a neat tip for making assertions about float point numbers.

** Total Revenue and a Relationship Bug
   In this lesson we work on calculating the total revenue for a concert, but run into an intersting bug we need to tackle with our =$concert->order= relationship.


* Listing Recent Orders

** Creating a Custom OrderFactory
   In this lesson we start working on making it possible for promoters to view a list of recent orders. When we hit a snag with some complex factory setup, we work on extracting a custom factory class to simplify our code.

** Asserting Against Sort Order
   In this lesson we add the assertions we need to verify that our recent orders are getting passed to the view in the right order, and discuss why asserting against view data makes this so much easier that in would be if we were asserting against HTML.

** Splitting Large Tests
   In this lesson we talk about when, why, and how to split up a large test into many.

* Queuing Mass Attendee Emails

** Storing Messages for Attendees
   In this lesson we add the ability to create a new message to be sent to all concert attendees.

** Confirming That a Job Was Dispatched
   In this lesson, we update our "store attendee message" implementation to actually dispatch a background job for sending the message.

** Unit Testting the Job
   In this lesson we drive out the implementation of the actual background job via a dedicated unit test.

** Refactoring for Robustness
   In this lesson we refactor the implementation of our background job to better handle large numbers of recipients.

** Mailable Testing Refresher and Demo
   In this lesson we walk through a unit test for our new mailable and demo our new mass email feature.

* Upgrading to Laravel 5.5

** Upgrading to Laravel 5.5
   In this lesson we use our test suit to guide us as we upgrade to Laravel 5.5.

* Uploading Concert Posters

** Faking Uploadings and File Systems.
   In this lesson we write our first test for uploading concert images, and walk through how to attach files to requests in feature tests, as well as how to use Laravel's built-in file system fake to make assertions about file uploads.

** Storing Files and Comparing Contents
   In this lesson we get our initial file upload test passing, and also talk about how to verify that the stored file contents match the uploaded file contents.

** Validating Poster Images
   In this lesson we add additional tests for validating the file type, dimensions, and aspect ratio of uploaded concert posters.

** Optional Files and the Null Object Pattern
   In this lesson we add a test to make sure that concert posters are optional, and come up with a clean implementation using the Null Object pattern.

* Optimizing Poster Images

** Testing Events
   In this lesson we decide on a design for our poster image processing feature and start by test-driving an event.

** Testing the Event Listener
   In this lesson we drive out our SchedulePosterImageProcessing event listener with TDD.

** Resizing the Posted Image
   In this lesson we walk through how to test resizing images using the =Intervention Image= image processing library.

** Optimizing the Image Size
   In this lesson we add an additional processing step to reduce the image size, and talk about how to test that the optimized image still looks like the original image.

* Inviting Promoters and Accepting Inivitations

** Upgrading Laravel and Deleting Some Code
   Before we get started with the next feature, let's quickly upgrade to the latest Laravel patch release and take advantage of some new features that let us delete some of our custom helpers.

** Viewing an Unused Inivation
   In this lesson, we drive out the ability for a promoter to view their inivitation to join TicketBeast.

** Viewing Used or Invalid Invitations
   In this lesson, we drive out what should happen when someone tries to view an invitation that has already been used, as well as inivation that doesn't exists.

** Registering with a Valid Invitation
   In this lesson we drive out the form endpoint for registering with a valid invitation code.

** Registering with an Invalid Invitation
   In this lesson we make sure that users can't register with invalid invitation codes.

** Validating Promoter Registation
   In this lesson we add some validation rules to our registeration flow.

** Testing a Console Command
   In this lesson we TDD a custom Artisan command for creating new invitations.

** Sending Promoters an Inivitation Email
   In this lesson we enhance our custom command to also send an invitation email to the promoter being invited.

** Test-Driving the Email Contents
   In this lesson we make sure that the inivitation email cotains the correct invitation linke, and run through a quick demo of our finished feature.

* Automating Payouts With Stripe Connect
** Getting Cozy with Stripe Connect
  In this lesson, we learn about how Stripe Connect works and drive out an initial test for the OAuth redirect flow using Laravel Dusk.

** Authorizing with Stripe
   In this lesson we implement the first half of the Stripe Connect redirect flow, where we send promoters to Stripe to connect their account.

** Exchanging Tokens
   In this lesson we handle the second half of the redirect flow; exchanging the temporary code Stripe gives us for a valid access token that we can use to make requests on behalf of a promoter.

** Unit Testing Middleware
   In this lesson we work on driving out a middleware that will force promoters to connect a Stripe account.

** Testing Callbacks with Invokables
   In this lesson we make sure our middleware doesn't block promoters who have already connected their Stripe accounts, covering an approach for testing their interfaces that accepts callbacks using invokables classes.

** Testing That Middleware is Applied
   In this lesson we discuss and implement a strategy for making sure that our new middleware is applied to the correct routes.

** Updating Factories and a Speed Trick
   In this lesson we check if our middleware has had any impact on the rest of our test suit, and walk through a quick trick that can dramatically speed up your test suit.

** Total Charges for a Specific Account
   In this lesson we start working on sending payments directly to promoters by making sure we can verify which accounts received which payments.

** Paying Promoters Directly
   In this lesson we make the necessary changes to our application code to make sure that when a payment is processed it's sent to the promoter's account instead of the application account.

** Splitting Payments with Stripe
   In this lesson we update our =StripePaymentGateway= to match our new payment gateway contract, and add an additional test to make sure that pyaments processed by Strip are split as expected between the application account and the promoter's account.

** It's Alive
   In the final lesson of Test-Driven Laravel, we do one last demo of the ticket purchasing process from inviting a promoter to receiving an order confirmation, and double check that everything is really working as expected via the Stripe dashboard.
