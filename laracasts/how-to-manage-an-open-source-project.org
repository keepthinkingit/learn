* STARTED How to Manage an Open Source Project
  Managing a popular open source project can be daunting at first. How do we maintain all these issues, or automatically trigger our test suit for incoming PRs? And what's a useful workflow for brainstorming and adding new features?
  In this series, together, we'll manage and maintain an open source forum, called *Council*, that we originally built from scratch here at Laracasts.
  
** DONE The GitHub Repository
   CLOSED: [2018-08-08 Wed 12:31]
   - State "DONE"       from "STARTED"    [2018-08-08 Wed 12:31]
   To begin this series, let's push our project to GitHub, so that anyone can install it - and even contribute to make it better.

** DONE Installation Instructions
   CLOSED: [2018-08-08 Wed 12:48]
   - State "DONE"       from "STARTED"    [2018-08-08 Wed 12:48]
   Our project will be of little use, if the general public doesn't know how to install it. Let's work through that entire process, while making installation notes for the project's readme file.

** DONE Resolving Our First Issue
   CLOSED: [2018-08-09 Thu 05:07]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 05:07]
   In the previous issue, we created our first GitHub issue: "Unconfirmed users should not be given the oppertunity to prepare create forum threads." Let's resolve that very issue in this episode.

** DONE The Issue and PR Grind
   CLOSED: [2018-08-09 Thu 05:28]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 05:28]
   We already have a number of issues and pull requests up on GitHub. Let's get to work on these, as we learn the basic day-to-day workflow for maintaining any open source project.
   - Resolve relating issuses using the =relosves #<issue-number>=  or =Fix #<issue-number>= syntax in commit message.

** DONE Feature: Forum Reputation
   CLOSED: [2018-08-09 Thu 05:53]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 05:53]
   Natuarlly, a core component to managing any open source project is intergrating new features and functionality. With that in mind, let's extend our forum with "user reputation". This way, for each participant in the forum, a number that indicates their participation and experience level may be assigned to them.
   - Tests
     - =a_user_earns_points_when_they_create_a_thread= in =ReputationTest=
     - =a_user_earns_points_when_they_reply_to_a_thread= in =ReputationTest=
     - =a_user_earns_points_when_they_reply_is_marked_as_best= in =ReputationTest=

** DONE Feature: Forum Reputation Refactoring
   CLOSED: [2018-08-09 Thu 06:12]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 06:12]
   We now have a basic reputation system in place, but I think it could use some refactoring. At the moment, if somebody joined your team, how would they know where, and what conditions, reputation is awarded to a user? It's not easy at that moment, let's elevate the concept of "reputation" to a first class citizen.

** DONE Feature: Displaying Reputation
   CLOSED: [2018-08-09 Thu 06:18]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 06:18]
   Now that our tests are returning green, let's display each user's reputation on the page, next to their respective usernames.

** DONE Feature: Reducing Reputation
   CLOSED: [2018-08-09 Thu 06:39]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 06:39]
   At the moment, any user can "game the system" by rapidly creating and deleting threads or replies. We must ensure that, if a user's thread or reply is deleted, we reduce their reputation to match.
   - =a_user_loses_points_when_they_delete_a_thread= in =ReputationTest=
   - =a_user_loses_points_when_their_reply_to_a_thread_is_deleted= in =ReputationTest=
   - =a_user_earns_points_when_their_reply_is_favorited= in =ReputationTest=
   - =a_user_loses_points_when_their_reply_is_unfavorited=  in =ReputationTest=

** DONE Licensing and Code of Conducts
   CLOSED: [2018-08-09 Thu 07:42]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 07:42]
   Yeah, yeah, this one will be a little on the mundane side. Nonetheless, it needs to bee addressed. Most successful open source projects will include, within the root of the project, tho following three documents: LICENSE, CODE_OF_CONDUCT, and CONTRIBUTING. Let's do a quick overview in this episode.

** DONE Merging and Tweaking a Large PR
   CLOSED: [2018-08-09 Thu 08:07]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 08:07]
   Not all PRs amount to simple formatting and bug fixes. Often, you'll receive significant feature additions that affect dozens of files. In these cases, it's important to fully review, test, and even tweak the code before merging it into your codebase. Let's work through that process together.

** DONE Continuous Intergration
   CLOSED: [2018-08-09 Thu 08:18]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 08:18]
   Let's set up a continous intergration server with =Travis CI=. This way, we can automate the process of building and testing our project each time a new commit is made, or a PR is presented.
   - =.travis.yml=

** DONE StyleCI
   CLOSED: [2018-08-09 Thu 13:05]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 13:05]
   StyleCI is an excellent service for automating the process of analyzing and performing style-guide fixes. As an example, if your project conforms to PSR-2, but a pull request is submitted that doesn't adhere to that standard, wouldn't it be great if we could automatically fix those issue without nagging the contributtor to do it mannually?
   =.styleci.yml=

** DONE Syntax Highlighting PR with Refactoring
   CLOSED: [2018-08-09 Thu 16:41]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 16:41]
   It looks like a PR that adds syntax highlighting just came in. Let's work through the code changes, merge it in, and then apply a bit of refactoring to clean things up.
   - The more indent, the more complex code. So least indent.

** DONE The Importance of Understanding a PR
   CLOSED: [2018-08-09 Thu 17:06]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 17:06]
   If you're not careful, you mind find yourself merging PRs without fully understanding what the underlying code does. "Hey, the tests return green, so it's safe to merge. Right?" Try to avoid this mindset. It's vital that you study the code behind every pull request. Otherwise, you might end up with a codebase that in no way reflects your original vision and ideas for how the project should be structured.

** DONE Queues and Worker Bees
   CLOSED: [2018-08-09 Thu 17:31]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 17:31]
   Let's resolve this issue on GitHub. As part of the process, we'll need to do a quick review of dispatching jobs, and running queue workers.

** DONE A Thread Can Be Pinned
   CLOSED: [2018-08-09 Thu 17:50]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 17:50]
   In this episode, we'll work through a new PR that adds support for pinning one or more threads to the top of all results. This can be useful for important news-related posts, codes of conducts, etc. Let's review the PR, make any necessary tweaks, and merge it into master.

** DONE Archiving Channels With TDD
   CLOSED: [2018-08-10 Fri 16:42]
   - State "DONE"       from "STARTED"    [2018-08-10 Fri 16:42]
   Today, we need to build upon a recent commit that added support for editing channels. The PR stopped just short of allowing administrators to archive channels. As it turns out, this can be a bit tricky. So let's figure out our course of action, and implement it with TDD.
   - Tests
     - =a_channel_can_be_archived=
     - =an_administrator_can_mark_an_existing_channel_as_archieved= in =ChannelAdministrationTest=

** DONE Simpler Queries with Global Scopes
   CLOSED: [2018-08-10 Fri 16:58]
   - State "DONE"       from "STARTED"    [2018-08-10 Fri 16:58]
   It seems like, just about in all cases, when we fetch a collection of channels, they should exclude any archived records. What if we instead made that a global scope?
   - Tests
     - =archived_channels_are_exclude_by_default= in =ChannelTest=

** DONE The Test Proves It's a Bug
   CLOSED: [2018-08-10 Fri 17:29]
   - State "DONE"       from "STARTED"    [2018-08-10 Fri 17:29]
   When submitting a pull request to fix a bug, it's vital that a test accompanies your fix. The maintainer can't just take your word for it. Show them what the problem is. "Hey, if we take this specific route through the code, everything blows up. Here's a test that prove it.".
   - Tests
     - =the_path_to_a_channel_is_unaffected_by_its_archived_status= in =ChannelAdministrationTest=

** DONE Squash and Merging the New UI
   CLOSED: [2018-08-10 Fri 17:42]
   - State "DONE"       from "STARTED"    [2018-08-10 Fri 17:42]
   After a week of writing CSS, I'm ready to merge in the first draft of the new "Council" UI. We're not yet finished, however; there's still work to be done. The profile page hasn't yet been styled, and the forum requires the responsive Tailwind classes to display correctly on mobile devices. We'll tackle these lingering tasks soon, together.
