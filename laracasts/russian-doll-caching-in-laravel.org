* Russian-Doll Caching in Laravel
  Popularized in the Rails world, Russian Doll caching is an interesting approach, where you create nested fragment caches for your view logic. If you then link the keys for each of the cached items to the model's "updated_at" timestamp, what you get is easy caching for your view logic, and automatic cachebusting whenever the model is updated.
  In this series, we'll build a *custom package from scratch* to offer this very functionality.

** Overview and Homestead Setup
   Let's begin by learning what Russian Doll caching actully is, and then moving on to the initial project setup, where we install both Laravel and Homestead for the project.

** We Need Something to Cache
   Before we can starting building our caching system, we first need some sample data to cache. So let's use the idea of an index card and notes. In this lesson, we'll build up the necessary route, models, and migrations.

** Russian Doll Caching
   Now that we have all the set up out of the way, let's write a custom Blade directive so that we may begin implementing our Russian Doll caching machinisam.
   - if =$expression = '($argu)'= =App\RussianCaching::setUp{$expression}= = =App\RussianCaching::setUp($argu)=, just paste the string to the expression.
   - =$touches = [relation]= update relation model.
   - Class =static= properties, and =array_pop()= method combo;

** Creat a Package
   At this point, our experiement is working. However, for any new project, we'd have to copy all these files over. Gross. Let's instead begin creating a resuable package, which we can then pull through Composer.
   - =composer init=
