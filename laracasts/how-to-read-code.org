* STARTED How to Read Code
  To improve as a developer, you must focus on three things: learning, reading, and writing. Or, in other words, learn from somebody more seasoned than you; read a lot of code; and write your own code daily. This series will focus on the reading component. Together, we'll mentally parse an open source project. How was it constructed? What are the routing conventions? How are the controllered structured?

** DONE Get it Running Locally
   CLOSED: [2018-07-12 Thu 17:51]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 17:51]
   Let's use the =laravel.com= source code as the basis for our learning in this series. This code is freely available to review on GitHub. Specifically, we'll focus on the documentation layer. We see all these markdown files for each page of documentation. How are they loaded, parsed, and presented on the page? And how is versioning handled? We'll decode all of it. The begin this journey, we must first get the laravel.com source code running locally.
   - Running code locally
     - git clone laravel code
     - git clone laravel documentation
   - =mv docs/** ./= move all docs stuff to current directory

** DONE Finding the Documentation Page
   CLOSED: [2018-07-13 Fri 09:31]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 09:31]
   Now that we have the application running locally, let's figure out how a documentation page is loaded. We already know that each section is stored as Markdown file. So how exactly are the files loaded annd presented to the user?

   - step by step read code.

** DONE Parsing Markdown
   CLOSED: [2018-07-13 Fri 09:52]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 09:52]
   It seems that, at some point, the companion Markdown for a requested documentation page is loaded, compiled, and cached. In this episode, let's figure out exactly how that workflow is organized and processed.

** DONE Rendering the Documentation
   CLOSED: [2018-07-13 Fri 10:04]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 10:04]
   We've figured out how the Markdown files are loaded, and parsed. The only remaining step is to get the content on the page. In this episode, we'll learn how the content is passed to the view, while accounting the situtations when an invalid documentation page is requested.

** DONE Full Page Caching
   CLOSED: [2018-07-13 Fri 10:21]
   - State "DONE"       from "STARTED"    [2018-07-13 Fri 10:21]
   Now that we fully understand how the documentation is loaded, parsed, and rendered on the screen, let's move on to different piece of the codebase. Are there additional performance considerations that we might learn from? Well, as it turns out, the answer is yes. The Laravel.com website adopts full page caching to vastly improve load times. Why boot the entire framework for each request, when you can easily render a cached HTML response instead?
   - =Middleware/CacheResponse.php=
