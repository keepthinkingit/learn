* ES2015 Crash Course
  If you feel overwhelmed by the lightning-fast pace of the JavaScript Community, you're not alone. The JavaScript(likely using JQuery) you might have writen in 2009 doesn't event remotely resemble the scripts of today. In this series, I'll give you a crash course on the latest and greatest that the language has to offer.

** Babel Setup
   Before we begin toying around with the new features in ES6, we must first review basic compilation, using Babel. This way, all browsers will understand the cutting edge ES6 code you'll soon be writing.

** ES6 Compilation With Laravel Elixir
   If you happen to use Laravel as you framework of choice, then you'll be happy to know that, with Laravel Elixir, you don't even have to think about Babel. Everything will just work.

** To Var, Let, or Const
   ES6 introduces two new keywords for declaring variables: =let= and =const=. The only question is: how do you know which of the three to choose for any given situation? Well, let's talk about it.
   - =var= hoisting
   - =let= block
   - =const= Not 100% unmutable
   - How to use?
     - Default to using =const=
     - If need change the variable, change to =let= reassignment.
     - Never use =var= again
     -
** Arrows
   Arrows in ES2015 provide a friendly function shorthand for performing common tasks. While not a complete replacement for the =function= keyword, you'll still get an enormous amount of usage out of this new syntax.
   - zero argument =this.tasks.each(()=> console.log('task'))=
   - one argument =this.tasks.each((task) => console.log(task))=
   - more than one argument =this.tasks.each((task, index) => console.log(task, index))=
   - Use arrow shorthand, =this= keyword will change to parent.

** Default Parameters
   ES5 doesn't offer support for default parameters. So, as a result, we all ended up resorting less-than-ideal alternatives. Luckily, with ES6, it'll all just work the way you'd expect. Even better, you're not limited to primitives alone; you can event set the default value equal to the result of a function call!

** Rest and Spread
   ES6 finally introduces support for both the "rest" and "spread" operators. In this lesson, I'll demonstrate what they are, and how you'll use them in your codebases.

** Template Strings
   Template literials allow us to remove all that funky trickery we resorted to for creating elegant multi-line strings. Instead, simpley replace those single quotes with backticks, and you're done. Even better, they also support variables subsituations. No more awkward concatenation.

** Awesome Object Enhancements
   ES6 includes a wide range of =Object= additions. In this episode, we'll review three of my favorites: property shorthand, short methods, and object destruturing.

** Classes
   ES6 are particularly appealing to those of us who predominantly work in traditional server-side languages. With ES5, you'd need to leverage the confusing prototype object to attach methods. But, now, all of that awkward code is pushed behind the scenes. In its place is a more familiar structure that you'll love.

** ES6 Modules
   Organizing JavaScript for large projects in 2005 was a bit of nightmare. It wasn't abnormal to find twenty different script imports in an HTML file. And, worse, it was up to you, the developer, to understand and remember the order to which each of your scripts must be imported. To say it was all dependancy nightmare is an understatement. Luckily, in recent years, modules have come the the rescue!
