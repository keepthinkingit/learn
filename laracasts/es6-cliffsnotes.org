* ES2015 Crash Course
  If you feel overwhelmed by the lightning-fast pace of the JavaScript Community, you're not alone. The JavaScript(likely using JQuery) you might have writen in 2009 doesn't event remotely resemble the scripts of today. In this series, I'll give you a crash course on the latest and greatest that the language has to offer.

** Babel Setup
   Before we begin toying around with the new features in ES6, we must first review basic compilation, using Babel. This way, all browsers will understand the cutting edge ES6 code you'll soon be writing.

** ES6 Compilation With Laravel Elixir
   If you happen to use Laravel as you framework of choice, then you'll be happy to know that, with Laravel Elixir, you don't even have to think about Babel. Everything will just work.

** To Var, Let, or Const
   ES6 introduces two new keywords for declaring variables: =let= and =const=. The only question is: how do you know which of the three to choose for any given situation? Well, let's talk about it.
   - =var= hoisting
   - =let= block
   - =const= Not 100% unmutable
   - How to use?
     - Default to using =const=
     - If need change the variable, change to =let= reassignment.
     - Never use =var= again
     -
** Arrows
   Arrows in ES2015 provide a friendly function shorthand for performing common tasks. While not a complete replacement for the =function= keyword, you'll still get an enormous amount of usage out of this new syntax.
   - zero argument =this.tasks.each(()=> console.log('task'))=
   - one argument =this.tasks.each((task) => console.log(task))=
   - more than one argument =this.tasks.each((task, index) => console.log(task, index))=
   - Use arrow shorthand, =this= keyword will change to parent.
