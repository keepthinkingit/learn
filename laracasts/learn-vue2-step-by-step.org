* Learn Vue2: Step by Step
  Vue is easily one of the most exciting additions to the front-end world in many years. With its intuitive API, and the fact that it can be applied to any type of application, it's no wonder why folks have gravitated to it as much as they have.
  If you'd like to jump on board, let me shou you, step by step, exactly you what you need to konw. It's the best way to learn Vue.

** 01 - Basic Data Binding
   Let's begin with a review of basic data binding in Vue. You'll get you first glimpse into the framework's wonderful, and automatic, reactivity.


   - Create a Vue instance
   - Bind dom root the Vue instance
   - Bind the dom element to instance data

** DONE 02 - Setup Vue Devtools
   CLOSED: [2018-07-04 Wed 22:38]
   - State "DONE"       from "STARTED"    [2018-07-04 Wed 22:38]
   Let's install =Vue Devtools= sooner, rather than later. As you'll see, this gives us a portal into any Vue instance on the page. Especially in these early stages, you'll get a lot of use out of this Chrome extension.
   - =$vm0.data-properties=

** DONE 03 - Lists
   CLOSED: [2018-07-04 Wed 22:48]
   - State "DONE"       from "STARTED"    [2018-07-04 Wed 22:48]
   In real life, we're often working with arrays, rather than strings. In this episode, you'll learn how to use the =v-for= directive to filter through a list of items and render them on the page. We'll also continue our review of reactivity, in the process.
   - =v-for=
   - =v-text=
   - =mounted= once the element is mounted

** DONE 04 - Vue Event Listeners
   CLOSED: [2018-07-06 Fri 09:17]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 09:17]
   In the previous episode, we defaulted to traditional event listeners and DOM traversal. Luckily, though, there's simpler way with Vue. Let's review the =v-on= directive for registering event listener.
   - =v-on:click=
   - =methods: {}=
   - =v-on:keyup=
   - =v-on:click= equals to =@click=

** DONE 05 - Attribute and Class Binding
   CLOSED: [2018-07-06 Fri 11:43]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 11:43]
   We haven't yet reviewed attribute binding in Vue. This is a key concept to understand, so make sure that you pay attention over the next few minutes. We can use the =v-bind= directive to bind a property in our model to any element attribute.
   - =v-bind:attribute=
   - =v-bind:attribute= equivalance =:attribute=
   - =:class="{ 'className': boolean}"= traditional binding

** DONE 06 - The Need for Computed Properties
   CLOSED: [2018-07-06 Fri 12:48]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 12:48]
   Often, you'll find that a piece of data needs a bit of calculation, before it's rendered on to the page. In such instances, Vue's computed properties are exactly what you require.
   - =computed properties=
   - use =dataList.filter(data => condition)= to filter data

** DONE 07 - Components 101
   CLOSED: [2018-07-06 Fri 12:57]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 12:57]
   Let's begin reviewing Vue components. You'll make heavy use of these, as you begin to harness all that Vue has to offer, so pay special attention to the next several episodes.
   - Vue global component
     #+BEGIN_SRC js
       Vue.compontent('task', {
           template: '<li><slot></slot></li>'
           data(){ return {}}
       })
     #+END_SRC

** DONE 08 - Components Within Components
   CLOSED: [2018-07-06 Fri 13:27]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 13:27]
   Not only can we create components, but, of course, any component may further consist of child components. In this episode, let's review a basic example of that very thing.
   - Single root element

** DONE 09 - Practical Component Exercise #1: Message
   CLOSED: [2018-07-06 Fri 13:39]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 13:39]
   Let's begin reviewing the process of creating an assortment of pratical components for your own projects. We'll start with a simple one: convert Bulma's "message" component into a full-fledged Vue component with behavior.
   - =props=
