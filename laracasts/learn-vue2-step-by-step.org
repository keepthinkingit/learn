* Learn Vue2: Step by Step
  Vue is easily one of the most exciting additions to the front-end world in many years. With its intuitive API, and the fact that it can be applied to any type of application, it's no wonder why folks have gravitated to it as much as they have.
  If you'd like to jump on board, let me shou you, step by step, exactly you what you need to konw. It's the best way to learn Vue.

** 01 - Basic Data Binding
   Let's begin with a review of basic data binding in Vue. You'll get you first glimpse into the framework's wonderful, and automatic, reactivity.


   - Create a Vue instance
   - Bind dom root the Vue instance
   - Bind the dom element to instance data

** DONE 02 - Setup Vue Devtools
   CLOSED: [2018-07-04 Wed 22:38]
   - State "DONE"       from "STARTED"    [2018-07-04 Wed 22:38]
   Let's install =Vue Devtools= sooner, rather than later. As you'll see, this gives us a portal into any Vue instance on the page. Especially in these early stages, you'll get a lot of use out of this Chrome extension.
   - =$vm0.data-properties=

** DONE 03 - Lists
   CLOSED: [2018-07-04 Wed 22:48]
   - State "DONE"       from "STARTED"    [2018-07-04 Wed 22:48]
   In real life, we're often working with arrays, rather than strings. In this episode, you'll learn how to use the =v-for= directive to filter through a list of items and render them on the page. We'll also continue our review of reactivity, in the process.
   - =v-for=
   - =v-text=
   - =mounted= once the element is mounted

** DONE 04 - Vue Event Listeners
   CLOSED: [2018-07-06 Fri 09:17]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 09:17]
   In the previous episode, we defaulted to traditional event listeners and DOM traversal. Luckily, though, there's simpler way with Vue. Let's review the =v-on= directive for registering event listener.
   - =v-on:click=
   - =methods: {}=
   - =v-on:keyup=
   - =v-on:click= equals to =@click=

** DONE 05 - Attribute and Class Binding
   CLOSED: [2018-07-06 Fri 11:43]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 11:43]
   We haven't yet reviewed attribute binding in Vue. This is a key concept to understand, so make sure that you pay attention over the next few minutes. We can use the =v-bind= directive to bind a property in our model to any element attribute.
   - =v-bind:attribute=
   - =v-bind:attribute= equivalance =:attribute=
   - =:class="{ 'className': boolean}"= traditional binding

** DONE 06 - The Need for Computed Properties
   CLOSED: [2018-07-06 Fri 12:48]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 12:48]
   Often, you'll find that a piece of data needs a bit of calculation, before it's rendered on to the page. In such instances, Vue's computed properties are exactly what you require.
   - =computed properties=
   - use =dataList.filter(data => condition)= to filter data

** DONE 07 - Components 101
   CLOSED: [2018-07-06 Fri 12:57]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 12:57]
   Let's begin reviewing Vue components. You'll make heavy use of these, as you begin to harness all that Vue has to offer, so pay special attention to the next several episodes.
   - Vue global component
     #+BEGIN_SRC js
       Vue.compontent('task', {
           template: '<li><slot></slot></li>'
           data(){ return {}}
       })
     #+END_SRC

** DONE 08 - Components Within Components
   CLOSED: [2018-07-06 Fri 13:27]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 13:27]
   Not only can we create components, but, of course, any component may further consist of child components. In this episode, let's review a basic example of that very thing.
   - Single root element

** DONE 09 - Practical Component Exercise #1: Message
   CLOSED: [2018-07-06 Fri 13:39]
   - State "DONE"       from "STARTED"    [2018-07-06 Fri 13:39]
   Let's begin reviewing the process of creating an assortment of pratical components for your own projects. We'll start with a simple one: convert Bulma's "message" component into a full-fledged Vue component with behavior.
   - =props=
** DONE 10 - Practical Component Exercise #2: Modal
   CLOSED: [2018-07-09 Mon 10:26]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 10:26]
   Let's move on to our next pratical component exercise. A traditional modal box provides some key learning ponints. In particular, we're going to learn how to communicate between components. What happens if one Vue instance or component needs to be notified when a particular actions takes place? How might we broadcast such things?
   =@close= attach the custom event
   =@emit('close')= emit the custom event

** DONE 11 - Pratical Component Exercise #3: Tabs
   CLOSED: [2018-07-09 Mon 10:51]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 10:51]
   Let's review one more pratical component exercise, before moving on to new topics. Let's recreate the common tabs feature that you've seen on so many websites. This will give us a number of interesting techinques to review.
   - =props: {required: true}=:   =props= object syntax
   - =this.$children= get all of the slot children
   - =props= are unmutable
** DONE 12 - Component Communication Example #1: Custom Events
   CLOSED: [2018-07-09 Mon 15:57]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 15:57]
   Let's begin reviewing the options you have, when it comes to communication between Vue components. Or, in other words, how can one component notify another about a particular action or event that just took place?
   - =v-on:eventName= equivalance =@eventName=

** DONE 13 - Component Communication Example #2: Event Dispatcher
   CLOSED: [2018-07-09 Mon 16:56]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 16:56]
   The next choice you have, to allow for communication between Vue components, is creating your own event dispatcher. Don't worry, this is much easier than it sounds, due to the fact that every Vue instance already implements the necessary interfaces!
   - =window.Event = new Vue()=
   - =Event.$emit('applied')=
   - =Event.$on('applied', ()=>{})=

** DONE 14 - Named Slots in a Nutshell
   CLOSED: [2018-07-09 Mon 17:09]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 17:09]
   So far, we've only reviewed default components slots. Or, in other words, "take this bit of content, and insert it right there", as designated by the =slot= tags. But what about when we require more control? A modal component is a perfect example of this. If you want to slot a header section in one place, and a footer section in another, named slots are exactly what you need.
   - Declare
    #+BEGIN_SRC html
      <slot name="header"></slot>
      <slot>Default content here</slot>
    #+END_SRC
   - Use
     #+BEGIN_SRC html
       <div slot="name"></div>
       <template slot="name"></template>
     #+END_SRC

** DONE 15 - Single-Use Components and Inline Templates
   CLOSED: [2018-07-09 Mon 17:18]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 17:18]
   Not every component needs to be generic and reusable. Sometimes, a single, view specific component is exactly what the doctor ordered. In this episode, we'll review the basic concept, and then discuss when you might reach for the =inline-template= attribute to nest your template directly in your HTML file.
   - Name view conversasion: =name-view=
   - =inline-template=
   - Follow the single-root regular

** DONE 16 - Webpack and vue-cli
   CLOSED: [2018-07-09 Mon 17:36]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 17:36]
   Let's begin focusing on structure, and how you'll build actual applications with Vue. That means we're ready to learn both =Webpack= and =vue-cli=. I will warning you ahead of time: this can be a little confusing. But just stick with me, and we'll iron out all the kinks as best as we can.
   As an aside, if you use Laravel, you'll be happy to know that the framework offers some facilites to make this whole process even simpler. We'll review that soon.
   - =components= properties

** DONE 17 - Hot Module Replacement
   CLOSED: [2018-07-09 Mon 17:49]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 17:49]
   Hot module replacement is incredibly cool. Yes, it will automatically refresh the page each time you change a component; however, what's particular neat is that the state for all components will remain unchange. Think of it like "Live Reload" for every single component in your application. In this video, I'll quickly demonstrate how it works.

** DONE 18 - Vue Ajax Requests with Axios
   CLOSED: [2018-07-09 Mon 18:05]
   - State "DONE"       from "STARTED"    [2018-07-09 Mon 18:05]
   Vue doesn't provide any specific AJAX functionality out of the box. Instead, you have the entire spectrum of the JavaScript community to pull from. May be you're already using jQuery? Ifso, =$.ajax= will do the trick. Want a native option? Consider the fetch API (just don't forget to include a polyfill for older browsers). Or, maybe a general purpose library will do the trick? In this lesson, we'll review =Axios=: a clean and simple HTTP request API that you can be intergrated into any project within seconds.

** DONE 19 - Object-Oriented Forms: Part 1
   CLOSED: [2018-07-10 Tue 09:38]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 09:38]
   Let's review some techniques that we might implement to DRY up our form interactions. If you've ever noticed yourself writing the same exact code, over and over, for each form, then extracting a =Form= class may be exactly what you need. Let's get started with part one of this two-part series.
   - =@submit.prevent= Prevent default DOM event.
   - In Vue =this.$data= get the Vue data property
   - =axios.post().then().catch()=
   - =errors.name[0]= change to =errors.get('name')=, the last errors is class =Error= instance
   - =errors.report(errorData)=
   - =errors.clear(field)=
   - =errors.has(field)=, JavaScript can use =this.errors.hasOwnProperty(property)= to check.
   - =errors.any()=, JavaScript can use =Object.keys.length= to check
   - =event.target.name= get the event target field name

** DONE 20 - Object-Oriented Forms: Part 2
   CLOSED: [2018-07-10 Tue 10:22]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 10:22]
   Now that we have our validation error handling in place, we can move on to extracting a dedicated =Form= class. This class can be responsible for resetting itself, submitting the AJAX request to our server, and more. Ready to dig in?
   Once you finished this lesson, it's over to you. How might you expand these two classes to simplify your form interaction even further? Get started, and then let us know that you came up with in the comments.
   - Class =Form= property can get by =form.property=, it can also use to the =v-model= binding.
   - =axios[requestType]().then(this.onSuccess.bind(this))= Bind =this= to the callback context
   - =Object.assign({}, this)= clone =this= object

** DONE 21 - Object-Oriented Forms: Part 3
   CLOSED: [2018-07-10 Tue 11:10]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 11:10]
   Let's take one more episode to refactor our code and address some community questions from the previous episode. Specially, we'll update the =form= class to return a =Promise= when submitted, we'll create a few AJAX helper methods, and, lastly, we'll refactor two methods to improve clarity. Ready?
   - =Promise=
     #+BEGIN_SRC js
       return new Promise((resolve, reject) => {
           axios[requestType](url, this.data())
               .then(response => {
                   this.onSuccess(response.data);

                   resolve(response.data);
               })
               .catch(error => {
                   this.onFail(error.data);

                   reject(error.data);
               })
       })
     #+END_SRC

** DONE 22 - Webpack Config From Scratch
   CLOSED: [2018-07-10 Tue 11:35]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 11:35]
   You've learned a bit about =vue-loader= already; however, for learning purposes, let's build up a Webpack configuration file from scratch, so that we can begin extracting and importing modules. This will give you a solid review of the fundamentals, while also providing an opportunity to review just how powerful (yet initially confusing) all this stuff can be. Don't worry: in the next episode, I'll show you some options to simplify new projects that use Webpack.
   - =output.publicpath= use the production in CDN.

** DONE 23 - This is Laravel Mix
   CLOSED: [2018-07-10 Tue 14:15]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 14:15]
   One issue, with any build tool, is that for each new project, you have to reproduce the entire setup again and again. Wouldn't it be useful if we could optimize for the 80% of folks who simply want general ES2015+ module compilation, some CSS preprocessing, and possibly a few other common tasks? And for the remaining 20%, well, they should have access to the underlying configuration file, so they may tweak it to their project's exact needs. Well, that's exactly what Laravel Mix does for you
   - =mix.js(['a.js', 'b.js'], 'destination directory')=, bundle complie file.

** DONE 24 - Shared State 101
   CLOSED: [2018-07-10 Tue 14:25]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 14:25]
   Let's begin reviewing shared state. You'll absolutely run into this before too long. If you have multiple Vue instances or components that need access to the same data - and they also need to be in sync with one another - how exactly do we allow for that?
   1. Shared the source object for the Vue instances.

** DONE 25 - Custom Input Components
   CLOSED: [2018-07-10 Tue 14:48]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 14:48]
   You'll surely come across instances in your own projects, where you'd like to wrap a form input within a custome component. This way, you can have a single place to attach all custom sanitization, validation and behavior. However, in the process, you'll also find that the useful =v-model= directive no longer works the way it usually does.
   In this episode, we'll learn exactly what Vue's =v-model= does, and then review how to make it work on any custom component.
   - =v-model=
     #+BEGIN_SRC html
       <input type="text" v-model="coupon"></input>
       <input type="text" :value="coupon" @input="coupon = $event.target.value">
     #+END_SRC

   - Define =ref= and use =this.$refs.input.value=

** DONE 26 - Vue SPA Essentials: Routing
   CLOSED: [2018-07-10 Tue 15:31]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 15:31]
   As a workflow exercise, over the next few episodes, we'll review some essential topics related to building a full SPA with Vue2. First up, we should discuss client-side-routing, and how that fit into Vue. As always, we'll start entirely from scratch, and build up our project.
   - =vue-router=
   - =router-link=
   - =router-view=

** DONE 27 - SPAs and the Backends
   CLOSED: [2018-07-10 Tue 15:53]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 15:53]
   A single-page application still needs its data from somewhere. In this episode, we'll work with Laravel a bit to build up a =status= model, and its associated data. Then, once we register the necessary route endpoint, we can return this data as JSON. This way, Vue and Axios can easily fetch the data they require from our server.
   - When fetch the relationship data, use =select= can not effect, because it must take the =id= column
   - Create the =model= directory to add all the model file.

** DONE 28 - Vue Filters
   CLOSED: [2018-07-10 Tue 16:03]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 16:03]
   In the previous episode, we referenced a simple function to render a relative date for each stream. However, Vue filters are more approperiate for basic string manipulation operations like this.
   - =filters= properties

** DONE 29 - Dedicated Form Components
   CLOSED: [2018-07-10 Tue 16:42]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 16:42]
   Let's continue with our Stream demo app, and review the process of adding new statuses to the stream. To allow for this, we'll created a dedicated form component, pull in the =Form= and =Errors= classes from the =Object Oriented Forms= episodes, and then update our Laravel backend code.
   - =middleware= => =validation= => =create the statuses= => =return it, and also include the user=

** DONE 30 - Testing Vue: Part 1
   CLOSED: [2018-07-10 Tue 17:05]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 17:05]
   In this episode, we'll step the excellent =Ava Test framework=, and begin testing a basic Vue component from scratch. As you'll find, there are a few small gotchas that you'll want to be aware of.
   - Simple test
     #+BEGIN_SRC js
       test('that it renders a notification', t => {

       })
     #+END_SRC


   - =babel-register=
   - When test, use the tricky =new Vue(Notification).$mount()=  to get let the vue instance mounted
   - Use =browser-env= to mock the browser
   - Test Props
     #+BEGIN_SRC javascript
       test('that it renders a notification', t => {
           let N = Vue.extend(Notification);

           let vm = new N({ propsData: {
               message: 'Foobar'
           }}).$mount();

           t.is(vm.$el.textContent, 'Foobar');
       })
     #+END_SRC
   - beforeEach =test.beforeEach(t => {})=

** DONE 31 - Vue Component Responsibility
   CLOSED: [2018-07-10 Tue 17:43]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 17:43]
   Let's take a few moments to discuss structure and responsibility, as it relates to your Vue components. Specifically, we'll review a hidden child component that is begging to be extracted.

** DONE 32 - Vue Subclassing
   CLOSED: [2018-07-10 Tue 17:54]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 17:54]
   From time to time, you may find that components of a centain type require special functionality. Rather than copying and pasting this logic from file to file, what else might be a possibility? Well, though we could create a mixin for this purpose, let's instead opt for a dedicated subclass. In this episode, we'll use the common collection example to illustrate this workflow.
   - =vue.extend()=

** DONE 33 - Scoped Slots
   CLOSED: [2018-07-10 Tue 18:19]
   - State "DONE"       from "STARTED"    [2018-07-10 Tue 18:19]
   Scoped slots allow us to treat any given Vue component slot as a reusable template that you can pass data to. If you've ever needed to override the markup for a given slot within a parent, but don't have access to the relevant underlying data, template scoping is the solution.
   - Default Slot
     #+BEGIN_SRC html
       <slot :item=items></slot>

       <template scop="props">
         <h5>{{ props.item }}</h5>
       </template>
     #+END_SRC


   - Named Slot
     #+BEGIN_SRC html
       <slot name="menu-list" :item=items></slot>

       <template slot="menu-list" scop="{ item }">
         <h5>{{ item }}</h5>
       </template>
     #+END_SRC

** DONE 34 - Wrap Existing Tools into Components
   CLOSED: [2018-07-12 Thu 12:10]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 12:10]
   In this episode, we'll wrap the popular =Flickity= carousel library into a dedicated Vue component. As you'll find, do so will allow us to expose a single interface, while isolating all awareness of Flickity to a single File.
   - =Flickity= library
   - =placeholder image=
   - include package css: =import "flickity/dist/flickity.min.css"=

** DONE 35 - Create a Testimonials Component With Me
   CLOSED: [2018-07-12 Thu 12:44]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 12:44]
   In this episode, come along as I create a testimonials component for the upcoming Laracasts UI refresh. We'll discuss the benifits of isolated all related behavior within a single file, as well as one techniques for throttling the avatar mouserover event handler to an acceptable frequency.
   - =justify-center= in =flex= layout
   - =:class="featureTestimonials.id === testimonials.id ? 'border-dark' : 'border-transparent'"=

** DONE 36 - The Difference Between Debounce and Throttle
   CLOSED: [2018-07-12 Thu 12:56]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 12:56]
   Most front-end developers never take the time to fully learn the difference between =debounce= and =throttle=. Instead, they substitute each option, hoping to achieve their disired end result. In this episode - though not directly related to Vue - we'll take some time to learn and review the differences between the two, as well as when you might reach for each.
   - [[http://demo.nimius.net/debounce_throttle/][demo]]
   - =_.throttle= and =_.deboucnce=

** DONE 37 - Mega Menus and One to One Relationships
   CLOSED: [2018-07-12 Thu 13:56]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 13:56]
   In this lesson, come along as we construct a mega-menu from scratch. We'll learn how to create a explicit link between an anchor tag and its associated menu, while allowing both pieces to live within the same Vue component and consume the same data.
   - [[https://github.com/LinusBorg/portal-vue][PortalVue]]

** DONE 38 - Vue Portal Use Case #2
   CLOSED: [2018-07-12 Thu 14:17]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 14:17]
   Let's review one more example for when you wight reach for a =portal=. If you need a way to move a link within a Vue component file to a different part of the page, Vue portals to the rescue.
   - =<portal-target slim></portal-target>= slim portal, so that portal do not add another div element
   - =<portal-toraget name="unique"></portal-target>>= unique name

** DONE 39 - Workshop - Contact Support Modal
   CLOSED: [2018-07-12 Thu 14:48]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 14:48]
   In this episode, we'll work together on the Laracasts codebase, as I create a pop-up modal for the "Contact Support" link. Why redirect to a new page and download all the necessary assets simply to fill out a form? Instead, we'll add a layer on top of the main page, and submit an Ajax request with the user's question.
   - [[https://github.com/euvl/vue-js-modal][vue-js-modal]]

** DONE 40 - Reusability
   CLOSED: [2018-07-12 Thu 15:00]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 15:00]
   In the =Modern CSS for Backend Developers=, one of the lessons focused on constructing both the CSS and JavaScript for an accordion-like component. In this episode, we'll review the Vue-specific code we wrote in that lesson, and review how we can make it more agnostic and reusable.

** DONE 41 - Reusability: Part2
   CLOSED: [2018-07-12 Thu 15:25]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 15:25]
   Let's continue with our accordion component refactor. In this lesson, we'll create two components: =Accordion= and =AccordionItem=. This will allow us to use a data-driven approach to declaring the visibility of each item's associated body.
   - Parents and child communication
     - Parent comunicate with child through =props=
     - Child communicate with parent through =event=
   - Use =this.$vnode.key= to get the reserve =key= properties.

** DONE 42 - Fixed to the Top
   CLOSED: [2018-07-12 Thu 15:43]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 15:43]
   In this episode, we'll learn how to fix an HTML element to the top of the page, based upon the current scroll position. This is a common feature in countless websites. We'll tackle the implementation in two steps. First, we'll get it to work in the simplest way possible. Then, we'll refactor toward a reusable component that can be applied anywhere.
   - chrome tricks: select dom and can use =$0= in the console to execute code.
   - =$0.offsetTop= get the current DOM element offset top pixels.
   - =window.scrollY= window scrolled position.
