* Eloquent-Relationships
Eloquent make the process of interacting with your database tables as natural and intuitive as possible. It's vital that your recognize and understand six key relationship types. Let's review them all - one episode per relationship.

** DONE One to One
   CLOSED: [2018-08-21 Tue 06:40]
   - State "DONE"       from "STARTED"    [2018-08-21 Tue 06:40]
    First up, we have "one-to-one" relationships. This is an easy one to picture in your head. What is one thing that a user might be associated with? What about a profile, or an address, or an avatar?
    - Summary
      - =DB::getQueryLog()= and =DB::enableQueryLog()=

** DONE One to Many
   CLOSED: [2018-08-24 Fri 11:00]
   - State "DONE"       from "STARTED"    [2018-08-24 Fri 11:00]
   Now that we have "one-to-one" relationships locked and labeled, let's move on to our next Eloquent relationship: "one-to-many". What might be an example of something a user would have many of? What about posts, or porjects, or tasks? You'll reach for this relationship constantly in your daily workflow.
** DONE Many to Many
   CLOSED: [2018-08-28 Tue 09:08]
   - State "DONE"       from "STARTED"    [2018-08-28 Tue 09:08]
   Many to many relationships are a bit more confusing to understand. Let's break it down by reviewing the common "posts" and "tags" relationships. A one-to-one or one-to-many relationship isn't quite right here. A post will never own a tag. It can be associated with one, sure, but it does'nt own the tag. The same is true in reverse. When we encounter such situations such as this, a "many-to-many" relationship is exactly what we need.
** DONE Has Many Through
   CLOSED: [2018-08-31 Fri 12:38]
   - State "DONE"       from "STARTED"    [2018-08-31 Fri 12:38]
   While not nearly as common, the =hasManyThrough= relationship, when necessary, can prove to be incredibly useful. This relationship type allows you to perform queries across long distance relationships.
   - Summary
     - =hasManyThrough= =hasMany= what table? =through= what table?
** DONE Polymorphic Relationships
   CLOSED: [2018-09-04 Tue 05:48]
   - State "DONE"       from "STARTED"    [2018-09-04 Tue 05:48]
   We've made it to the scariest of Eloquent relations: polymorphic. Don't worry! As with most things, the word is scarier than the technique. A polymorphic relationship allows a model to belong to any number of models on a single association. Let's demonstrate this with a praticale example.
   - =Videos=, =Series=, and =Collections=
** DONE Many to Many Polymorphic Relations
   CLOSED: [2018-09-20 Thu 13:40]
   - State "DONE"       from "STARTED"    [2018-09-20 Thu 13:40]
   We've finaly made it to the most intimidating of Eloquent relationships: many to many polymorphic. Don't worry, it's far simpler to understand than you might initially think. In this lesson, we'll construct a standard many-to-many relationship: a user can "like" a post. Then, we'll throw a wrench into the mix. What if a user can also "like" a comment? How might we restructure our existing structure to allow for this?
