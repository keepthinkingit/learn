* Unlocking Badges Workshop

** Episode 1: Begin With an Example
   Like so mang things is life, starting a new feature is the hardest part. We're creating something out of nothing. It's not an easy task to define how that "something" should appear. But we'll try. Let's begin with one example of how the system should behave, using TDD.
** Episode 2: Event Fakery
   Let's drop down a level and write a test to ensure that, when experience is awarded to a user, an announcement (or event) is made to the rest of our application. Later, we'll listen for this announcement and grant any necessary achievement badges to the user.

** DONE Episode 3: Use TDD to Construct Migrations and Attributes
   CLOSED: [2018-07-07 Sat 05:56]
   - State "DONE"       from "STARTED"    [2018-07-07 Sat 05:56]
   It sounds like we'll need an =Achievement= Eloquent model, as well as its associated database table. Let's use TDD to construct both.
   - Create database attributes with TDD tests one by one.

** DONE Episode 4: A User Can Be Awarded Achievements
   CLOSED: [2018-07-07 Sat 06:11]
   - State "DONE"       from "STARTED"    [2018-07-07 Sat 06:11]
   In this episode, we'll construct the relationship between a user and their respective achievements. As you'll see, this is a prime use-case for a generic pivot table.
   - Use =$ahievement->awardedTo($user)=  mehtod but also =$user->awarded($achievement)= because it can make the =User.php= not more bigger.

** DONE Episode 5: What If We Didn't Use a Database?
   CLOSED: [2018-07-17 Tue 07:56]
   - State "DONE"       from "STARTED"    [2018-07-17 Tue 07:56]
   Leading up to this episode, I've been doing some thinking. Yes, we can store achievement badges within the database, but where do we put the logic that determines if the given user should be granted that badge? This led me to considering a different path we might consider. In this episode, let's tinker around with that idea. If we like it, we'll keep it. If we don't, we'll revert it.
