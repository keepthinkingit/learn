* Unlocking Badges Workshop

** Episode 1: Begin With an Example
   Like so mang things is life, starting a new feature is the hardest part. We're creating something out of nothing. It's not an easy task to define how that "something" should appear. But we'll try. Let's begin with one example of how the system should behave, using TDD.
** Episode 2: Event Fakery
   Let's drop down a level and write a test to ensure that, when experience is awarded to a user, an announcement (or event) is made to the rest of our application. Later, we'll listen for this announcement and grant any necessary achievement badges to the user.

** DONE Episode 3: Use TDD to Construct Migrations and Attributes
   CLOSED: [2018-07-07 Sat 05:56]
   - State "DONE"       from "STARTED"    [2018-07-07 Sat 05:56]
   It sounds like we'll need an =Achievement= Eloquent model, as well as its associated database table. Let's use TDD to construct both.
   - Create database attributes with TDD tests one by one.

** DONE Episode 4: A User Can Be Awarded Achievements
   CLOSED: [2018-07-07 Sat 06:11]
   - State "DONE"       from "STARTED"    [2018-07-07 Sat 06:11]
   In this episode, we'll construct the relationship between a user and their respective achievements. As you'll see, this is a prime use-case for a generic pivot table.
   - Use =$ahievement->awardedTo($user)=  mehtod but also =$user->awarded($achievement)= because it can make the =User.php= not more bigger.

** DONE Episode 5: What If We Didn't Use a Database?
   CLOSED: [2018-07-17 Tue 07:56]
   - State "DONE"       from "STARTED"    [2018-07-17 Tue 07:56]
   Leading up to this episode, I've been doing some thinking. Yes, we can store achievement badges within the database, but where do we put the logic that determines if the given user should be granted that badge? This led me to considering a different path we might consider. In this episode, let's tinker around with that idea. If we like it, we'll keep it. If we don't, we'll revert it.
** DONE Nah
   CLOSED: [2018-07-20 Fri 07:01]
   - State "DONE"       from "STARTED"    [2018-07-20 Fri 07:01]
   In the previous episode, we tinkered with the idea of not using a database at all for determine and fetching a user's acquired achievement badges. Let's talk about that refactor - including the pros and cons to such an approach - before ultimately reverting in favor of a better solution for our needs.
** DONE Syncing User Achievements With Collections
   CLOSED: [2018-07-20 Fri 07:28]
   - State "DONE"       from "STARTED"    [2018-07-20 Fri 07:28]
   Now that we've reverted the previous lesson's work, we can move on to a clean approach. In this lesson, we'll build the necessary system to register and sync achievements with any given user, based on newly awarded experience.
   - =qualifier()=

** DONE Two Ways to Organize a Project
   CLOSED: [2018-07-20 Fri 23:00]
   - State "DONE"       from "STARTED"    [2018-07-20 Fri 23:00]
   In this episode, we'll discuss two equally valid ways to organize all of the achievement-related files, including service providers, events, listeners, etc.
   - Named Event and Listener:
     - When the Event is fired ? (Event)
     - Then what I do ? (Listener)

** DONE Sensible Defaults with TDD
   CLOSED: [2018-07-24 Tue 08:26]
   - State "DONE"       from "STARTED"    [2018-07-24 Tue 08:26]
   In this lesson, let's use TDD to provide a sensible default =name= for each achievement, based upon the class name.

** DONE An Artisan Command to Generate New Achievements
   CLOSED: [2018-07-25 Wed 09:27]
   - State "DONE"       from "STARTED"    [2018-07-25 Wed 09:27]
   It might be nice to offer an Artisan command to quickly scaffold new achievement classes. Though it provides only a small speed boost, conveniences like this are always useful and appreciated.
   - Use by the method =$this->command(Command::class)= in ServiceProvider to register command.

** DONE Viewing Achivements: Part 1
   CLOSED: [2018-07-31 Tue 13:33]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 13:33]
   Much of this feature is now working, so let's finally view it in the browser. We'll start by preparing a few sample achievement badges, and then seeding and fetching a user's achievements. Once we have this information, is should be as simple as looping through all achievements, and toggling a CSS class that indicates if the current user has been awarded the related badge.

** DONE Viewing Earned Achivements: Part 2
   CLOSED: [2018-08-01 Wed 09:19]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 09:19]
   In this lesson, we'll construct a view that displays which achievements the current user has and has not been awarded.
   - CSS =filter: grayscale(0.2)= properties, when hover the DOM element.
** DONE We Need a Seeder Console Command
   CLOSED: [2018-08-04 Sat 03:40]
   - State "DONE"       from "STARTED"    [2018-08-04 Sat 03:40]
   One we deploy this new feature, initially, it will appear as if all users have zero achievements. This is because the logic that syncs a users achievements does not take place until they've accrued new experience points. To fix this, let's use TDD to construct an artisan command to seed all user achievements in our system.
   - Tests
     - =achievements_can_be_seeded_for_all_users_as_a_console_command= in =AchivementsTest=
   - Call command in test =$this->artisan('laracasts:sync-user-achievements')=
   - =$this->reportProgress= in command
** DONE The Real Laracasts Achievements Badges
   CLOSED: [2018-08-07 Tue 08:17]
   - State "DONE"       from "STARTED"    [2018-08-07 Tue 08:17]
   I will now begin constructing the actual achievement badge that you can earn here at Laracasts. The badge designs are ready, so come along as I add them.

** DONE More Sensible Achivement Defaults
   CLOSED: [2018-08-09 Thu 12:51]
   - State "DONE"       from "STARTED"    [2018-08-09 Thu 12:51]
   In the previous episode, we noticed that an achievements icon filename is almost always the kekab-case version of the class name. With that in mind, let's make that the default. Next, we'll turn the achievement's description property into a dedicated method.
   - Tests
     - =it_sets_a_default_icon=

** DONE Achievement Caching
   CLOSED: [2018-08-10 Fri 05:46]
   - State "DONE"       from "STARTED"    [2018-08-10 Fri 05:46]
   Did you notice that we have a pesky N+1 issue at the moment? Let's resolve it in this episode by caching all chievements forever. If at some point in the future we need to add a new achievement, we'll simply make a note to clear out the cache during our deployment process.
   - Let the cache in a higher position.
** DONE Custom Achievement Collections
   CLOSED: [2018-08-13 Mon 07:54]
   - State "DONE"       from "STARTED"    [2018-08-13 Mon 07:54]
   In some situations, you may find it beneficial to return a custom collection class for your various Eloquent queries. No problem: overriding the =newCollection= method on your model makes this tasks a cinch to complete.
   - Tests
     - =it_returns_a_custom_achievement_collection= in =AchievementsTest=
     - =it_can_filter_achievements_down_to_only_those_that_the_given_user_has_been_awarded= in =AchievementsTest=
   - Summary
     =Achievement.php= model overriding the =newCollection=, return the =Achievements.php= class. The =Achievements.php= class extends Laravel base =Collection= class. So that when use =Achievement::all()= method, it will return the =Achievements.php= collection. In the =Achievements.php= we can add any we we to extend collection method, like =expert()= method to get a collection that contain all the expert achievements.
** DONE Color Coding Achievements
   CLOSED: [2018-08-14 Tue 08:09]
   - State "DONE"       from "STARTED"    [2018-08-14 Tue 08:09]
   At the moment, all achievements exist on the same playing field, which we disignate using a blue background. Let's add the necessary logic to specify a bignner, intermidiate, or advanced skill level for each achievement type. Then, in our UI, we can visualize these with yellow, blue, and red background colors, respectively.
   - Tests
     - =it_sets_a_default_skill_lever= in =AchievementTypeTest=
     - =it_persists_the_achievement_attributes_in_the_database= in =AchievementTypeTest=

   - Summary
     use =enum= type in the database.
** DONE Custom Collection Sorting With Lookup Tables
   CLOSED: [2018-08-19 Sun 09:20]
   - State "DONE"       from "STARTED"    [2018-08-19 Sun 09:20]
   I'd like to sort all achievements from beginner to advanced. It sounds like we'll need custom sorting logic. Let's tackle that in this lesson by building a lookup table to translate each skill level to a respective number. Finally, we'll finish the lesson by discussing object responsibility and where logic like this should live.
   - Tests
     - =it_can_sort_achivements_according_to_skill_level= in =AchievementsTest= =unit=
   - Summary
     - Collection =sortBy= with closure
       #+BEGIN_SRC php
         $this->sortBy(function ($achievement) {
             return [
                 'beginner' => 1,
                 'intermediate' => 2,
                 'advanced' => 3
             ][$achievement['level']];
         });
       #+END_SRC
     - Encapsulate get achievement level =levelAsNumber()= method in =Achievement.php=
