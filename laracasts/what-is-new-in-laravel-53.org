* STARTED What's New in Laravel 5.3
  It's about that time again! The release of Laravel 5.3 is imminent. That means, it's finally time to dig in and see what's new. And, well, there's a lot! From directory changes, to notifications, to passports, to everything in between!

** DONE Important Directory Changes
   CLOSED: [2018-07-19 Thu 10:50]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 10:50]
   Let's start off with some of the smaller changes, and then work our way up to the big additions! To begin you'll notice that your main directory structure is slightly different! A new routes folder at the top level? And what happened to the events, listeners, jobs, and policies folders? What's going on?

** DONE The Query Builder Now Returns Collections
   CLOSED: [2018-07-19 Thu 10:57]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 10:57]
   We're still taking it slow. What kind of series would it be if we discussed the coolest additions first? Anyways...next up, we have a small, but important change to be aware of. As of 5.3, all query builder calls will return Collection objects, rather than arrays. If you think about it, this make the general Laravel API more consistent, as relevant Eloquent calls already return Collection objects.

** DONE The Global Cache Helper
   CLOSED: [2018-07-19 Thu 11:05]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 11:05]
   In this episode, I'll introduce you to a funky little new =cache= global function! In 5.3, written by yours truly.
   - =cache=
     - =cache()=
     - =cache('foo', 'default')=
     - =cache(['foo' => 'bar'], 60)=
     - =cache(['user.1.vote' => [1, 2, 3]], 60)=
     - =cache()->put()=
     - =cache()->get()=
   - =session=
     - =session()=
     - =session(['foo' => 'bar'])=
     - =session('foo')=
     - =session('foox', 'default')=

** DONE The JavaScript Suggestion
   CLOSED: [2018-07-19 Thu 11:21]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 11:21]
   In Laravel 5.3, the framework makes a little suggestion on a practical JavaScript setup, using =Vue=. Have a look at your =resources/assets/js/= folder to check it out. It's important to note, however, that this is all entirely optional. If you prefer Ember or Backbone, delete the contents of you main =app.js= entry point, and you're good to go! It's only a suggestion.

** DONE Simpler Pagination
   CLOSED: [2018-07-19 Thu 11:34]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 11:34]
   Out of the box in Laravel 5.3, pagination will still feel very similar to you. However, should you need to modify the underlying HTML, the process is now significantly easier. In fact, you'll find that the process is very similar to how it was is Laravel 3!
   - =$user->links()=

** DONE Mailables
   CLOSED: [2018-07-19 Thu 12:26]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 12:26]
   Laravel 5.3 "mailables" are thin wrappers around the traditional syntax for sending mail. I think you'll find that they're easier to work with, and much easier on the eyes. Let me show you the essiential in the episode.
   - =Mail::to('jeff@example.com')->send(new WelcomeToLaracasts)=

** DONE Foreach and the Loop Object
   CLOSED: [2018-07-19 Thu 12:36]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 12:36]
   This next addition to Laravel 5.3 is a small, but useful one. When using the =foreach= or =forelse= Blade directives, you'll now have a new =$loop= object available to each iteration. This will provide useful information about the loop, including the current index, if it's the first or last item, if there are remaining iterations for the loop, and more.

** DONE Toggle Pivot Table Records
   CLOSED: [2018-07-19 Thu 13:47]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 13:47]
   In Laravel 5.3, you'll find a new =toggle()= method on all =belongsToMany= relationships. This solves the issue of needing to delete a pivot table record if it exists, or adding it if it doestn't. As an example, consider needing to toggle a user's "like" status for a post.
   - =$user->favorites()->attach()=
   - =$user->favorites()->detach()=
   - =$user->favorites()->toggle()=

** DONE Notifications: Email
   CLOSED: [2018-07-19 Thu 14:39]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 14:39]
   Notifications in Laravel 5.3 are incredible. Create a single a notification class, and then designate one or more distribution channels to use - such as email, SMS, Slack, and more. I think you'll really like this new component, so let's take a few episodes to review all of its functionality. We'll start with basic email notifications, and review the nice, fluent API for rapidbly building up messages.
   - =php artisan make:notification=
   - =$user->notify(new LessonPublished($lesson))=

** DONE Notifications: Database
   CLOSED: [2018-07-19 Thu 15:02]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 15:02]
   Let's move on and review the database channel for sending notifications. With this approach, any notification you send will be stored in the database, at which point you can fetch them and display them for the user. In this episode, we'll review the entire process - while also leveraging polymorphism to render each notification type within our views as cleanly as possible.

** DONE Send Slack Notifications With Laravel in Minutes
   CLOSED: [2018-07-19 Thu 15:12]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 15:12]
   Let's learn how to use Laravel 5.3's Slack notification channel to notify us, the administrator, each time payment is processed in our application. As you'll quickly see, it's all a cinch!

** DONE Super Simple File Uploading
   CLOSED: [2018-07-19 Thu 15:31]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 15:31]
   Admit it: you always have to do a bit of research to remind yourself how to upload files, determine the temporary folder, guess the file extension, etc. Well now, I promise: you won't forget. In Laravel 5.3, the =UploadedFile= instance offers a new =store()= method for rapidly saving files - even all the way to S3 (as we'll do in this video).
   - =request()->file('avatar')->store('avatars')= store file at =storage/avatars/=
   - =storeAs=

** DONE Laravel Passport
   CLOSED: [2018-07-19 Thu 16:02]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 16:02]
   Want to setup OAuth2 server with API authentication in minutes, instead of days? Well, you're in luck. =Laravel Passport= has your back! In this episode, Taylor Otwell, himself, stops by show you the goods.

** DONE Closure-Based Commands
   CLOSED: [2018-07-19 Thu 16:25]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 16:25]
   Closure-based commands are a useful alternative to generating full Artisan command classes. You'll find that this approach is quite similar to how you do your routing (closures vs. controller classes). Want to pass a simple closure to handle a command? Well now you can!
   - Example
     #+BEGIN_SRC php
       Artisan::command('generate:model {name}', function() {
           $this->info('All Done!');
       })->describe('Generate a special model.');
     #+END_SRC

** DONE Advanced Search With Laravel Scout
   CLOSED: [2018-07-19 Thu 16:51]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 16:51]
   Laravel Scout is a driver-based solution for performing advanced, full text search on your Eloquent Models. Out of the box, it comes with support for Algolia, which offers a fantastic service. In this episode, we'll learn how to set everything up, and send a table full of records to Algolia. For the more curious among you, we'll also, toward the end of the video, dig into the guts of Scout to figure out how everything is put together behind the scenes.

** DONE Advanced Search With Laravel scout: Part 2
   CLOSED: [2018-07-19 Thu 17:22]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 17:22]
   Now that you understand how to setup and import your Eloquent records, let's figure out how to query them. You'll find that Scout attaches a global query scope to your models, which adds a useful =searchable()= method. While we're reviewing this, we'll also take some time to review custom rankings with Algolia.

** DONE Facade Fakes
   CLOSED: [2018-07-19 Thu 17:44]
   - State "DONE"       from "STARTED"    [2018-07-19 Thu 17:44]
   In Laravel 5.3, a number of facades provide a static =fake= method that can be called to replace the underlying class with a minimal fake version, for the purposes of testing. A fake is a type of test double, where you create a light, barebones implementation of a particular API or interface in order to satisfy or assist a given test.
   Consider a scenario where the code you're testing fires an event. Well, it's possible that you don't want the associated event listeners to be triggered, as part of that test. Instead, we can use a double: replace the underlying dispatcher with a fake version. Now, we can assert that the necessary event was triggered, without worrying about any of the side effects from firing an actual real event. It sounds complicated, but I assure you that it's all very simple.
   - =Event::fake()=
   - =Event::assertFired(UserBecameForeverSupporter::class)=
