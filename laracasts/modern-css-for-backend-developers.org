* Modern CSS for Backend Developers
** Episode 12: Piece By Piece Mobile Tweaking
   The dream is that, as you construct a page, you follow a mobile-first cycle: make it look nices on mobile devices, and then build out from there. The truth, sadly, is that this isn't always so easy. What happens when you have a Photoshop design that only illustrates the desktop view for a particular page? How do you follow mobile-first design when you don't yet know how it should appear on those devices? This is the reality for countless business.
   In this lesson, we'll review a section of the new Laracasts design that hasn't yet been optimized for mobiles users. We'll review where things went wrong, while making mental notes for how to proctect against this in the future.

** DONE Episode 13: Better Sizing and Spacing with Rems
   CLOSED: [2018-07-04 Wed 23:18]
   - State "DONE"       from "STARTED"    [2018-07-04 Wed 23:18]
   While pixels have long been the go-to unit for declaring font-sizes, the truth is that, these days, it's not the best choice. What if, instead, we could declare our sizes and spacing dynamically, based upon the font-size of the root =html= element? Think about the possibilites. Your layout could scale seamlessly, from mobile to widescreen devices.
   - =rem= based root  =html= tag
   - The default =html= font size is =16px=

** DONE Episode 14: Reverse the Order
   CLOSED: [2018-07-11 Wed 07:02]
   - State "DONE"       from "STARTED"    [2018-07-11 Wed 07:02]
   You may find yourself wanting to reverse the order of certain elements on the page, when viewed on a mobile device. The most common illustration of this is the typical "sidebar on the left, main content on the right" layout. For mobile devices, you'll likely want to see the main content before the sidebar. Luckily, flexbox has our backs.
   - =flex-direction:column-reverse=

** DONE Episode 15: Make It Sticky
   CLOSED: [2018-07-12 Thu 06:13]
   - State "DONE"       from "STARTED"    [2018-07-12 Thu 06:13]
   Consider the common example of a heading that should remain fixed to the top of the page until the next section becomes visible. Traditionally, developers have resorted to JavaScript to allow for this. However, this days, we can tackle it with basic CSS. And when I say basic, I mean two properties and you're don.
   - =position: sticky=
   - =top: 0=
