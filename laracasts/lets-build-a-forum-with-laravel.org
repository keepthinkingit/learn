* STARTED Let's Build A Forum with Laravel and TDD
  A forum is a deceptively complex thing. Sure, it's made up of threads and replies, but what else might exist as part of a forum? What about profiles, or thread subscriptions, or filtering, or real-time notifications? As it turns out, a forum is the perfect project to stretch your programming muscles. In this series, we'll work together to build one with tests from A to Z.

** DONE Initial Database Setup With Seeding
   CLOSED: [2018-07-31 Tue 15:51]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 15:51]
   Let's begin by reviewing the most minimal requirements for a forum. If you think about it, we couldn't possibly construct a forum without users, and replies. So let's tackle those first.

** DONE Test-Driving Threads
   CLOSED: [2018-07-31 Tue 16:13]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 16:13]
   Now that we have our seed data in place, we can move on to our first small feature: "a user should be able to read threads." Simple enough! We'll start with a basic test, and then scaffold the necessary views to make it pass.
   - Occured Tests
     1. =a_user_can_view_all_threads=
     2. =a_user_can_read_a_single_thread=
   - Controller name is *plural*
   - Assert page has specificed title.
     #+BEGIN_SRC php
       $response = $this->get('/threads');

       $response->assertSee($thread->title);
     #+END_SRC
   - Route Model Binding
   - Let Model has the =path= method

** DONE A Thread Can Have Replies
   CLOSED: [2018-07-31 Tue 16:30]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 16:30]
   Now that we've added a basic feature for users to read forum threads, we can next move on to viewing all replies associated with each thread. As before, we'll start with a test to describe our desired outcome.
   - Occured Tests
     1. =a_user_can_read_replies_that_are_associated_with_a_thread=
     2. =it_has_an_owner= in =ReplyTest= unit test
   - Model =created_at= and =updated_at= are Carbon instance
   - =php artisan make test ReplyTest --unit=

** DONE A User May Respond To Threads
   CLOSED: [2018-07-31 Tue 17:09]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:09]
   We've implemented the necessary functionality to render a thread with all relevant replies, but we haven't yet allowed a user to type in a reply and submit it to the server. Let's get started on that now.
   - Occured Tests
     1. =a_thread_has_replies=
     2. =a_thread_has_a_creator=
     3. =an_authenticated_user_may_participate_in_forum_threads=
     4. =a_thread_can_add_a_reply=
     5. =unauthenticated_users_may_not_add_replies=
   - Blade =@include= can inherit parent variables
   - =phpunit --filter <test-name>=
   - =$this->be($user)= sign in a user when test

** DONE The Reply Forum
   CLOSED: [2018-07-31 Tue 17:18]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:18]
   Now that we've tested the end-point for adding a new reply, the only remaining step is to create the HTML for the form. in the process, we'll also ensure that only logged-in users are able to see it.

** DONE A User May Publish Threads
   CLOSED: [2018-07-31 Tue 17:29]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:29]
   So far, a user can read and reply to threads, but they don't yet have the ability to publish their own threads. Let's begin fixing that in this episode.
   - Tests
     1. =an_authenticated_user_can_create_new_forum_threads=
     2. =guests_may_not_create_threads=

** DONE Let's Make Some Testing Helpers
   CLOSED: [2018-07-31 Tue 17:38]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:38]
   I'm a big fan of making the process of writing tests as natural as humanly possible. The harder it is to construct a test, the more likely it is your simply...won't. With that in mind, let's extract a few helpers and snippets to assist us.
   - functions
     1. =create()=
     2. =make()=
     3. =signIn()=

** DONE The Exception Handling Conundrum
   CLOSED: [2018-07-31 Tue 17:52]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:52]
   Now that our endpoint tests are returning green, we can construct the HTML forum to publish a new thread. However, in the process, we'll stumble upon an odd exception handling issue that needs to be addressed. Luckily, Adam Wathan has a useful solution that we can implement.
   - tests
     1. =guests_cannot_see_the_create_thread_page=

** DONE A Thread Should Be Assigned a Channel
   CLOSED: [2018-07-31 Tue 18:12]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 18:12]
   Right now, all threads are thrown into the same "global" namespace, so to speak. Ideally, we should assign each thread to a channel. That way, for a development forum, we may easily filter threads by PHP, or JavaScript, or Servers.
   - Tests
     1. =a_thread_belongs_to_a_channel=
     2. =a_thread_can_make_a_string_path=

** DONE How to Test Validation Errors
   CLOSED: [2018-08-01 Wed 09:57]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 09:57]
   We haven't written any validation logic yet for our forum. This means that a user could whip up a request with all sorts of invalid data, and we gladly persist it to the database. Let's fix that in this episode, while writing tests to ensure that everything functions as we expect.
   - Tests
     1. =a_thread_requires_a_title=
     2. =a_thread_requires_a_body=
     3. =a_thread_requires_a_validate_channel=
     4. =a_reply_requires_a_body=
   - Get response Location =$response->headers->get('Location')=
   - =assertSessionHasErrors('property')= when test validation errors
   - Encapsulate =disabledErrorHandling= and =signIn= and =post to server=  in =publishThread= for quickly test =Validation Errors=

** DONE Users Can Filter Threads By Channel
   CLOSED: [2018-08-01 Wed 10:18]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 10:18]
   Now that we've associated all threads with a channel, we can now perform the necessary UI updates to allow users to filter threads by their desired channel.
   - Tests
     - =a_user_can_filter_threads_according_to_a_tag=
     - =a_channel_consists_of_threads=
   - =Route Model Binding= use the =getRouteKeyName= method to change binding column.

** DONE Validation Errors and Old Data
   CLOSED: [2018-08-01 Wed 10:32]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 10:32]
   In this episode, we need to do a bit of work on the "create thread" page. We'll first add a link to the navigation bar, and then move on to tweaking the form, itself. Specifically, we shuld provide validation error feedback, and ensure that any text that the user types into the forum's various fields will be remembered if a validation error is triggered.
   - =old()= method to fetch the user typed

** DONE Extracting to View Composers
   CLOSED: [2018-08-01 Wed 10:51]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 10:51]
   Currently, we have two different SQL queries for fetching all channels directly in our view layer. Let's fix that by extracting a dedicated view composer.
   - =View::composer('<blade>', closure)=
   - =View::share('<blade>', closure)=

** DONE A User Can Filter All Threads By Username
   CLOSED: [2018-08-01 Wed 11:03]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 11:03]
   It would be nice if any user could have a link that displays only the threads that they've personally created. Even beyond that, why not allow for the ability to view any forum user's threads? Let's figure out how in this episode.
   - Tests
     1. =a_user_can_filter_threads_by_any_username=

** DONE A Lession In Refactoring
   CLOSED: [2018-08-01 Wed 11:33]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 11:33]
   Since it seems that filtering will be an important component to our application, let's take a bit of time to perform some refactoring. Luckily, because we have a set of tests to back us up every step of the way, we can be as bold as wish. There's no fear of breaking the app, if your tests will notify you the second you make a refactoring error.
   - Sequence
     1. ThreadsController@index
     2. Thread@scopeFilter
     3. ThreadFilters@apply
     4. Abstract Filters

** DONE Meta Details and Pagination
   CLOSED: [2018-08-01 Wed 14:13]
   - State "DONE"       from "TODO"       [2018-08-01 Wed 14:13]
   We should add a sidebar to each thread page for various meta information, such as when the thread was published, how many replies it has, and more. Further, we've yet to add pagination to our app. What happens when a thread has over one hundred replies? Let's ensure that we put the propper pagination links in place.
   - Add replies count method
     1. =$thread->replies->count()=
     2. =$thread->replies()->count()=
     3. =$thread->withCount('replies')=
     4. In =static::addGlobalScoped($builder)= add =$thread->withCount('replies')=
     5. use dynamic attribute =getRepliesCountAttribute=
   - =str_plural()=
   - Replationship Pagination =$thread->replies()->paginate(10)=

** DONE A User Can Filter Threads By Popularity
   CLOSED: [2018-08-01 Wed 14:44]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 14:44]
   It would be nice if users had the ability to filter all threads by popularity. That way, the most active threads will bubble to the top of the stack. Let's write a test and then implement this very feature.
   - Tests
     1. =a_user_can_filter_threads_by_popularity=
   - Use relationship to order =$thread->orderBy('replies_count', 'desc')=
   - Clear exists =orders=: =$this->builder->getQuery()->order = []=

** DONE A User Can Favorite Replies
   CLOSED: [2018-08-01 Wed 15:09]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 15:09]
   It would be useful if authenticated users could have the ability to "favorite" any reply within a thread. Let's begin impementing that functionality now, by using polymorphic relations.
   - Tests
     1. =an_authenticated_user_can_favorite_any_reply=
     2. =guest_cannot_favorite_anything=
     3. =an_authenticated_user_may_only_favorite_a_reply_once=

** DONE The Favorite Button
   CLOSED: [2018-08-01 Wed 15:33]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 15:33]
   Now that we've tested the full process of favoriting a reply, we can move on to creating the form to process this action for the user. In the process, we'll begin discussing the N+1 problem.
   - =$thread->load('replies')=, eager load one layer relationship
   - =$thread->load('replies.favorites)->load('replies.owner')=, eager load more layer relationships
   - =$this->hasMany()->withCount('favorties')= in =Thread@replies=, defined relationship and eagor count the favorites count for replies.

** DONE From 56 Quries Down to 2
   CLOSED: [2018-08-01 Wed 15:44]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 15:44]
   Let's review the N+1 problem, as it relates to Eloquent. To do so, we'll install =Laravel Debugbar= so that we can analyze the exact SQL quires that are being executed for each page load. As you'll learn, there are a variety of simple steps we can follow to reduce our query count by the dozens.

** DONE Global Scopes and Further Query Reduction
   CLOSED: [2018-08-01 Wed 16:04]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 16:04]
   In this episode, we'll continue optimizing our SQL queries. Specifically, we'll review global Eloquent scopes and the useful =$with= property to automatically eager load any necessary relationships.
   - =protected $with= property, global eager load relationship

** DONE A User Has a Profile
   CLOSED: [2018-08-01 Wed 16:21]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 16:21]
   It would be useful if every user in our forum had an associated profile page. That way, we can review more information about them, including all threads that they've personally created.
   - Tests
     1. =a_user_has_a_profile=
     2. =profiles_display_all_threads_created_by_the associated_user=

** DONE A User Can Delete Their Threads
   CLOSED: [2018-08-01 Wed 16:39]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 16:39]
   One simple ability that we haven't yet implemented is the option to delete threads. If "John Doe" creates a thread and later change his mind, let's allow him to delete it entirely.
   - Tests
     1. =a_thread_can_be_deleted=
     2. =guests_cannot_delete_threads=
     3. =threads_may_only_be_deleted_by_those_who_has_permission=

** DONE Authorization with Polices
   CLOSED: [2018-08-01 Wed 17:00]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 17:00]
   We must be careful that we don't inadvertently give any registered form user the ability to delete all threads. Let's create a policy class to ensure that this cann't happen.
   - Tests
     1. =unauthrozed_users_may_not_delete_threads=
     2. =authorized_users_can_delete_threads=

** DONE How to Construct an Activity Feed with TDD
   CLOSED: [2018-08-01 Wed 17:29]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 17:29]
   In this episode, we'll use TDD to drive out and activity feed. That way, we can, for example, track when a user creates a new forum thread, or posts a reply. As always, we'll begin with the most basic implementation. Once we get to green, we can then move on to the refactoring stage to clean things up drastically.
   - Tests
     1. =it_records_activity_when_a_thread_is_created=
     2. =it_records_activity_when_a_reply_is_created=
   - Use trait it Laravel, it will auto trigger =boot<TraitName>= method.

** DONE How To Construct an Activity Feed with TDD: Part 2
   CLOSED: [2018-08-01 Wed 17:49]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 17:49]
   Now that we've written the necessary code to record all relevant activity, in this episode, we can render it onto the user's profile page, and group all relevant records according to their date.
   - Basic polymorphic views
   - =groupBy(closure)=
   - =@component= blade directive

** DONE Extracting Controller Queries to the Model
   CLOSED: [2018-08-01 Wed 18:00]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 18:00]
   At the moment, we have long, fluent Eloquent query in our controller. Instead, let's use TDD to extract it into the =Activity= model.
   - Tests
     1. =it_fetch_a_feed_for_any_user=
** DONE The Activity Deletion Bug
   CLOSED: [2018-08-02 Thu 09:26]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 09:26]
   I think we have a bug in our activity feed. What happens if we delete a thread? Will that cascade and delete all relevant activity in the process? And, if not, what happens when we try to view the user's profile page? Hmm, let's write a regression test to find out.
   - Tests
     - =authorized_users_can_delete_threads=
   - =$thread->replies()->delete()= this is queryBuilder, so can not trigger =deleting= event. If want to trigger event, should use =$thread->replies->each->delete()= Eloquent collections.

** DONE Flash Messaging with Vue
   CLOSED: [2018-08-02 Thu 09:48]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 09:48]
   In this episode, we'll implement an elegant flash messaging system, using Vue. That way, when a user performs an important action, we can flash a quick message to indicate the outcome.
   - =redirect('/route')->with('flash', 'You state has been updated')= Redirect with flash session message.
   - Vue instance implement Event bus

** DONE A User's Activity Feed Should Include Favorited Replies
   CLOSED: [2018-08-02 Thu 09:58]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 09:58]
   At the moment, a user's activity feed will exclusively display a timeline of their own threads and replies. Let's extend that in this episode to include any replies that they've favorited.
   =view('<file-path>')->exists()=

** DONE Authorized Users Can Delete Replies
   CLOSED: [2018-08-02 Thu 10:10]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 10:10]
   We're still missing a very basic piece of functionality. Any authorized user should be able to delete a reply. Let's implement that in this episode.
   - Tests
     - =unauthorized_users_cannot_delete_replies=
     - =authorized_users_can_delete_replies=

** DONE A Vue Reply Component
   CLOSED: [2018-08-02 Thu 10:34]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 10:34]
   We're starting to realize that each individual form reply should have a decent amount of behavior associated with it. With that in mind, in this episode we'll create a dedicated Vue component for a reply, and then implement the necessary functionality to quickly edit the body of a reply without requiring a page refresh.
   - Tests
     - =authorized_users_can_update_replies=
     - =unauthorized_users_cannot_update_replies=
   - =inline-template=
   - =:attribute = {{ $reply }}= $reply object automatically transform to json object to Vue props.

** DONE Ajaxifying The Delete Button
   CLOSED: [2018-08-02 Thu 10:47]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 10:47]
   Now that each reply is wrapped within a dedicated Vue instance, we can easily swap out the traditional form for deleting the reply with a snappier AJAX version that doesn't require a page refresh.
   - =$(this.$el).fadeOut(300)= self fade out after 300ms

** DONE A Vue Favorite Component
   CLOSED: [2018-08-02 Thu 11:10]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 11:10]
   We have one last piece of the puzzle, when it comes to our =Reply= component. The favoriting functionality still consists of a traditional form. Let's turn that into a dedicated =Favorite= component to clean things up.
   - Tests
     - =an_authenticated_user_can_unfavorite_a_reply=
   - =$appends= Laravel model append attribute
   - Vue bind classes with computed property
     #+BEGIN_SRC js
       computed: () {
           return ['btn', this.isFavorited ? 'btn-primary' : 'btn-default'];
       }
     #+END_SRC
   - =isFavorited= to =active= and =favoritesCount= to =count=

** DONE Squashing Bugs
   CLOSED: [2018-08-02 Thu 11:26]
   - State "DONE"       from "STARTED"    [2018-08-02 Thu 11:26]
   I think we've introduced a couple of bugs related to adding and removing activity. Let's work through them in this episode and patch things up, before moving on to a new feature.
