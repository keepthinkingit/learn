* STARTED Let's Build A Forum with Laravel and TDD
  A forum is a deceptively complex thing. Sure, it's made up of threads and replies, but what else might exist as part of a forum? What about profiles, or thread subscriptions, or filtering, or real-time notifications? As it turns out, a forum is the perfect project to stretch your programming muscles. In this series, we'll work together to build one with tests from A to Z.

** DONE Initial Database Setup With Seeding
   CLOSED: [2018-07-31 Tue 15:51]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 15:51]
   Let's begin by reviewing the most minimal requirements for a forum. If you think about it, we couldn't possibly construct a forum without users, and replies. So let's tackle those first.

** DONE Test-Driving Threads
   CLOSED: [2018-07-31 Tue 16:13]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 16:13]
   Now that we have our seed data in place, we can move on to our first small feature: "a user should be able to read threads." Simple enough! We'll start with a basic test, and then scaffold the necessary views to make it pass.
   - Occured Tests
     1. =a_user_can_view_all_threads=
     2. =a_user_can_read_a_single_thread=
   - Controller name is *plural*
   - Assert page has specificed title.
     #+BEGIN_SRC php
       $response = $this->get('/threads');

       $response->assertSee($thread->title);
     #+END_SRC
   - Route Model Binding
   - Let Model has the =path= method

** DONE A Thread Can Have Replies
   CLOSED: [2018-07-31 Tue 16:30]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 16:30]
   Now that we've added a basic feature for users to read forum threads, we can next move on to viewing all replies associated with each thread. As before, we'll start with a test to describe our desired outcome.
   - Occured Tests
     1. =a_user_can_read_replies_that_are_associated_with_a_thread=
     2. =it_has_an_owner= in =ReplyTest= unit test
   - Model =created_at= and =updated_at= are Carbon instance
   - =php artisan make test ReplyTest --unit=

** DONE A User May Respond To Threads
   CLOSED: [2018-07-31 Tue 17:09]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:09]
   We've implemented the necessary functionality to render a thread with all relevant replies, but we haven't yet allowed a user to type in a reply and submit it to the server. Let's get started on that now.
   - Occured Tests
     1. =a_thread_has_replies=
     2. =a_thread_has_a_creator=
     3. =an_authenticated_user_may_participate_in_forum_threads=
     4. =a_thread_can_add_a_reply=
     5. =unauthenticated_users_may_not_add_replies=
   - Blade =@include= can inherit parent variables
   - =phpunit --filter <test-name>=
   - =$this->be($user)= sign in a user when test

** DONE The Reply Forum
   CLOSED: [2018-07-31 Tue 17:18]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:18]
   Now that we've tested the end-point for adding a new reply, the only remaining step is to create the HTML for the form. in the process, we'll also ensure that only logged-in users are able to see it.

** DONE A User May Publish Threads
   CLOSED: [2018-07-31 Tue 17:29]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:29]
   So far, a user can read and reply to threads, but they don't yet have the ability to publish their own threads. Let's begin fixing that in this episode.
   - Tests
     1. =an_authenticated_user_can_create_new_forum_threads=
     2. =guests_may_not_create_threads=

** DONE Let's Make Some Testing Helpers
   CLOSED: [2018-07-31 Tue 17:38]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:38]
   I'm a big fan of making the process of writing tests as natural as humanly possible. The harder it is to construct a test, the more likely it is your simply...won't. With that in mind, let's extract a few helpers and snippets to assist us.
   - functions
     1. =create()=
     2. =make()=
     3. =signIn()=

** DONE The Exception Handling Conundrum
   CLOSED: [2018-07-31 Tue 17:52]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 17:52]
   Now that our endpoint tests are returning green, we can construct the HTML forum to publish a new thread. However, in the process, we'll stumble upon an odd exception handling issue that needs to be addressed. Luckily, Adam Wathan has a useful solution that we can implement.
   - tests
     1. =guests_cannot_see_the_create_thread_page=

** DONE A Thread Should Be Assigned a Channel
   CLOSED: [2018-07-31 Tue 18:12]
   - State "DONE"       from "STARTED"    [2018-07-31 Tue 18:12]
   Right now, all threads are thrown into the same "global" namespace, so to speak. Ideally, we should assign each thread to a channel. That way, for a development forum, we may easily filter threads by PHP, or JavaScript, or Servers.
   - Tests
     1. =a_thread_belongs_to_a_channel=
     2. =a_thread_can_make_a_string_path=

** DONE How to Test Validation Errors
   CLOSED: [2018-08-01 Wed 09:57]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 09:57]
   We haven't written any validation logic yet for our forum. This means that a user could whip up a request with all sorts of invalid data, and we gladly persist it to the database. Let's fix that in this episode, while writing tests to ensure that everything functions as we expect.
   - Tests
     1. =a_thread_requires_a_title=
     2. =a_thread_requires_a_body=
     3. =a_thread_requires_a_validate_channel=
     4. =a_reply_requires_a_body=
   - Get response Location =$response->headers->get('Location')=
   - =assertSessionHasErrors('property')= when test validation errors
   - Encapsulate =disabledErrorHandling= and =signIn= and =post to server=  in =publishThread= for quickly test =Validation Errors=

** DONE Users Can Filter Threads By Channel
   CLOSED: [2018-08-01 Wed 10:18]
   - State "DONE"       from "STARTED"    [2018-08-01 Wed 10:18]
   Now that we've associated all threads with a channel, we can now perform the necessary UI updates to allow users to filter threads by their desired channel.
   - Tests
     - =a_user_can_filter_threads_according_to_a_tag=
     - =a_channel_consists_of_threads=
   - =Route Model Binding= use the =getRouteKeyName= method to change binding column.
