* Webpack For Everyone
  Webpack is a wonderful tool for bundling front-end assets. Having said that, it can sometimes be a bit confusing to newcomers who switch over from a more tranditional "concatenate this scripts and libiraries in this exact order" setup. However, considering the recent release of Webpack 2, there has never been a better time to dive in.
  In this series, I'll show you how simple it bundle and optimize your assets for production.

** Zero Configuration Compilation
   Let's dive in and begin bundling our Javascript with Webpack. As it turns out, we don't even need a =webpack.config.js= file yet. We can handle the entire process the command line.
   - =webpack ./src/main.js ./dist/bundle.js=
   - =webpack ./src/main.js ./dist/bundle.js --watch=
   - Add another arguments =npm run build -- --watch=

** A Dedicated Configuration File
   While it's neat that we can compile Webpack with a single command, in reality, in reality, you'll almost always want to use a dedicated =webpack.config.js= file to configure your Webpack build. Let's transition over in this episode.

** Modules are Simply Files
   The term "module" used to scare me. What exactly are they? Well, as it turns out, the answer is very simple: they're just files. Let's experiment with importing and exporting modules, while taking a few moments to discuss CommonJS and ES2015 modules.

** Loaders Are Transformers
   Let's move on and review Webpack loaders. Loaders allow us to transform and preprocess any number of file types. Maybe you'd like to require Sass files, or compile ES2015 with Babel, or event inject CSS into the browser's =head= tag. Let's review the process of requiring CSS in this episode.
   - The =loader= config in place =module > rules=, and use =test= key to load file extensions type, use =use= to load loader
   - =use= keyworld follow the right to left conversation to load loader when the loader is array.

** ES2015 Compilation with Babel
   Now that you are a bit more confortable with the concept of loaders, let's figure out how to write our JavaScript in ES2015, and then apply a =babel-loader= to compile everything down to vanilla JavaScript that any browser can understand.
   - install =babel-core= and =babel-loader=
   - add =.babelrc= file

** Minification and Environments
   In this episode, we'll learn how to minify our JavaScript with Webpack and Uglify. However, in this process, we'll also need to review environments. Often, you'll want to use on set of configuration for development, and another set for production. I'll show you how.
   - =new webpack.optimize.UglifyJsPlugin()=
   - =process.env.NODE_ENV=
   - =NODE_ENV=production npm run build=

** Sass Compilation
   You'll likely want to use some form of CSS processor in your workflow. In this lesson, I'll demonstrate how to compile Sass, as part of your webpack build. It's easy!
   - =npm install sass-loader node-sass --save-dev=

** Extracted CSS to a Dedicated File
   It's very possible that you don't want to inline all of you CSS into the page, using =style-loader=. Instead, let's review the =ExtractTextWebpackPlugin=, which allows Webpack to extract your CSS to a dedicated, traditional stylesheet.
   - =ExtractTextWebpackPlugin=
   - entry *name*
   - minimize css: =webpack.LoaderOptionsPlugin({ minimize: true })=

** The Relative URL Conundrum
   Easily, one of the most common points of confusion for developers switching to Webpack from a tool like Gulp stems from how Webpack(and =css-loader=) processes relative URLs withion your stylesheets. It's essential that your understand the concepts in this lesson, so don't skip it!
   - Use full file path
   - Set =css-loader= options =url= to false
   - Use =raw-loader=
   - Use =file-loader=

** How to Strip Unused CSS
   In this episode, we'll apply the =PurifyCSS webpack plugin= to automatically strip our generated stylesheets of any selectors that aren't being used within your HTML files.
