* STARTED Get Me Some Version Control
 Version control can be a mysterious thing at first. Why exactly do I need this? Before long, you depend on it with your life. If you're new to this world, let me help!

** DONE Say Hi to Git
   CLOSED: [2018-07-25 Wed 12:17]
   - State "DONE"       from "STARTED"    [2018-07-25 Wed 12:17]
   As with most tools, step one is to install it! Let's tackle that, and then perform our first commit.
   - =git config --global user.name=myname= Set global user name
   - =git config --global user.email=test@example.com= Set global user email
   - =git config --global core.editor=vim= Set global git editor
   - =git init= Create or new a git repository
   - =git add some.txt=
   - =git status= Current directory status
   - =git commit=  =git commit -m "First commit"=
   - =git log= Get all the git commit log

** DONE What Git Add Actually Does
   CLOSED: [2018-07-26 Thu 17:48]
   - State "DONE"       from "STARTED"    [2018-07-26 Thu 17:48]
   So you've learned how to add and commit files. But what exactly does that even mean, and what does each command do? 'Tis confusion
   - =git status=
   - =git diff=

** DONE Fixing and Amending Commits
   CLOSED: [2018-07-26 Thu 17:59]
   - State "DONE"       from "STARTED"    [2018-07-26 Thu 17:59]
   Almost immediately, you'll fall into a trap where you've made a commit, only to realize that you forgot something or made any sort of error or typo. Do you create a new commit? Do you amend the last one? Do you start over from scratch? Don't worry, for such a common thing, the fix is easy.
   - =git reset --soft commitcode= git reset commit, but code still exists
   - =git reset --hard commitcode= git reset everying
   - =git commit --amend=
   - =git show commitcode= show the commit change

** DONE Basic Workflow
   CLOSED: [2018-07-29 Sun 03:17]
   - State "DONE"       from "STARTED"    [2018-07-29 Sun 03:17]
   Before we move on, let's review the basic workflow you'll use when working on projects. Most importantly, we'll review the important question, "When are you supposed to create new commits?".
   - Commit use present general time. like =Install Laravel=
   - Commit first line is =title=, if want more message, add a blank line first, and follow the content after it.

** DONE Branching
   CLOSED: [2018-07-30 Mon 09:10]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 09:10]
   Back to the Future 2 is the key to understanding Git branching. I know, that sounds wierd, but it's true!
   - =get checkout -- file= discard files
   - =get checkout -b feature/bug/issue/fix-reporting= create new branch.
   - =get checkout master= change branch to master
   - =get merge feature-reporting= merge branch.
   - =get branch -d feature-reporting= delete branch.

** DONE Handling Merge Conflicts
   CLOSED: [2018-07-30 Mon 15:53]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 15:53]
   From time to time, you'll encounter a merge conflict. Yikes! How is Git supposed to know which piece of code you wish to favor, when it has been modified on two separate branches? Well, it doesn't! That's your job!
   - =git branch= list all branch
   - =git branch -v= list branch and most recent commit message
   - =git merge=
   - =git diff=

** DONE Git Alias
   CLOSED: [2018-07-30 Mon 16:01]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 16:01]
   You'll very quickly grow tired of typing these commands over and over. Instead, create some helpful aliase for yourself.
   - =git config --global alias.s status= set =status= to =s=
   - Git Stuff
     #+BEGIN_SRC bash
       alias ga="git add"
       alias gaa="git add ."
       alias gc="git commit -m "
       alias gp="git push github"
       alias gs="git status"
       alias nah="git reset --hard;git clean -df;"
     #+END_SRC

** DONE Stash Away Changes
   CLOSED: [2018-07-30 Mon 16:25]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 16:25]
   What about situations where you need to stash away changes temporarily, in order to switch to, for example, you master branch to perform some sort of hot fix? Sure, we could commit, but what if we're not ready for a commit just yet? How do we handle these scenarios?
   - =git stash=
   - =git stash list=
   - =git stash pop=
   - =git stash apply=
   - =git stash drop=
   - =git stash branch feature/reporting=

** DONE Pushing to GitHub
   CLOSED: [2018-07-30 Mon 16:34]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 16:34]
   Now that you've learned the basics of Git, let's figure out how push your repository up to GitHub.

** DONE Rebasing
   CLOSED: [2018-07-30 Mon 17:07]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 17:07]
   You've learned how to merge branches, but did you know that there's a secnod way to merge changes? Git rebasing offers a way to rebuild a clean commit history. It can be a bit confusing at first, so let me demonstrate the basic concept in this video.
   - =git rebase <branch>=
   - =git log --oneline=
   - =git log --oneline --graph=

** DONE Interactive Rebasing
   CLOSED: [2018-07-30 Mon 17:31]
   - State "DONE"       from "STARTED"    [2018-07-30 Mon 17:31]
   What about the times when you end up with a series of somewhat disjointed commits that don't even remotely tell a story. Perhaps commit messages like "WIP" or "fix typo are" littered through out the implementation of some given feature. Is it possible to fix things up? Of course it is. We'll use interactive rebasing to make the process a cinch.
   - =git rebase -i <branch>=
