* Scaling Laravel
** Laravel Performance

*** Optimize Command
    We cover the =php artisan optimize= command.

    We run this a lot (in laravel 5.5 and under) because it's defined in the =post-install-cmd= and =post-update-cmd= areas defined in the =composer.json= file.

    This command caches Laravel's service (Service Providers and their dependency/load order) definitions.


    - =composer dump-autoload --optimize=


*** The Route Cache
    We cover the route cache.
    Registering and matching requests to a route is a slow process. Caching the route registration and their class/dependency mappings/middleware (and so on) saves time on every request!
    The only caveat is that we cannot save routes that user Clousers. All routes must point to a Controller class to use the route cache.
    =php artisan route:cache=

*** The Config Cache
    The config cache will cache the compiled config files from the =config= directory or as defined within thired party packages.
    This includes configurations saved to the =.env= file.
    The caveat to this is that you cannot use the =env()= helper to read from the =.env= file with the config cache. Instead, you should define any values in =.env= as a config item. Then the values from =.env= will be cached along with the rest of config.
    The =env()= helper should only be called from your config PHP files.
    =php artisan config:cache=

*** Eager Loading
    Eager loadings helps solve the N + 1 query problem.
    When looping over query results, especially when using Eloquent with relationships, you may end up making many quries if you call a relationship on each return result from query.

*** Database Chunking
    Database chunking is great when you are returning a large number of results from the database.
    We can get all the results, but "chunk" them up - we split them across multiple quries.
    ~To use chunking, you MUST use a orderBy clause in your query. That being said, Laravel may be intelligent enough to order by a model key if you don't provide an orderBy yourself. That will only work for Eloquent models, however.~
    =xdebug_peak_memory_usage()=

*** MySQL Indexing I
    We need to properly index our database tables and columns to take advantage of our databases speed features!
    This video just covers the appliation setup we use to start testing large(ish) data sets.
    The main point is that we add =EXPLAIN= into our MySQL quries to get MySQL to show us information about each query, such as what indexes a query is or should be using.
    - =provider=

*** MySQL Indexing II
    We show what the =EXPLAIN= statement does in MySQL and what it's tell us.
    In particular we can see what =key= may or may not used how many =rows= need to be scanned/processed.
    ~Indexes are typically added to fields that you use in the =WHERE= section of a query~

    - =show indexes from table_name=

*** MySQL Indexing III
    We add indexes on various database tables to help reduce our total time spent querying the database.

    - Debugger add explain =config.debugger.explain=

*** Object Caching I
    We get our application ready to cache objects in Redis
    This just requires two things:
    1. In =.env=, change the =CACHE_DRIVER= (and optionally =SESSION_DRIVER=) to =redis=
    2. Run =composer require predis/predis= to get the labirary Laravel uses to talk to Redis

*** Object Caching II
    We cover a naive solution to object caching!
    Basically, we can just throw caching in where ever we want to save time on quries that don't necessarily need to always be absolutely up to date.

*** Object Caching III
    We can use the Decorator Pattern to make our use of caching a little more maintainable.
    - =decotartor pattern=

*** Object Caching IV
    Lastly with object caching we explore how much memory we might be using in Redis. We want to be careful that we don't save too much to our cache system and overload it.
    In our example, we save an array to Redis instead of entire serialized objects.


    In general:
    1. Consider saving database IDs to cache so you can retrieve items by ID in the database (instead of doing more expensive =WHERE= logic).
    2. Consider saving basic (scalar) data to cache (such as an array instead of a Collection object) to save on bytes saved to cache.
    3. Be care of creating a situtation where every user may end up with many variations of cached data, thus greatly expanding the amount of data held in cache with each new user.

** Server Setup
*** Installing The Basics
    We need a server to start with.
    We'll quickly cover building a server very simillar to what you'll find on Laravel Forge. This includes use the same server type - Ubuntu 16.04. It won't contain all the same software as Forge. In particular we'll install the following:
    1. Nginx
    2. PHP/PHP-FPM
    3. MySQL
    4. Redis

*** Forge Like Configuration
    Let's do some server configuration! We'll change some configuration to make the server more performat, and set the server up to be a little closer to Forge's setup.

*** Security
    We need to secure our server too!
    We'll change configuration for the following:
    - SSH
    - Auto Updates
    - Firewalls

** Server Optimization

*** Newwork Configuration
    Most servers are likely limited in the number of connections they can accept. This issn't necessarily a hard limit, but rather due to some conservative defaults.
    Let's see how we can allow more networking connections in and out of the server, and test our app with =ab=.

*** FPM Process Management
    PHP-FPM uses a process per connection sent to it to fulfill a web request. Processes can accept multiple connections in serial, however. They're kept up and running and accepting new connections (fastcgi web requests from nginx) for as long as we configure them.
    To allow the server to handle more simultaneous request, and more fully use available RAM/CPU that it might otherwise "leave on the table", we can tell PHP-FPM to create more processes to handle more requests.
    However, there is a balance between CPU and RAM usage to take into consideration. Our goal is to increases the maximum number of processes (and thus number of simlutaneous web requestes) as high as server can handle without choking other services.
    If there are too many FPM processes, we'll see either:
    - The server running out of RAM issues (and then using swap, or completing failing if no swap).
    - Generally users see errors here, and other services such as MySQL might die.
    - The server running out of the CPU, where you'll see requests complete or start to time out.
    - Generally users have slow response times, eventually leading to time outs.


    If you don't have enough processes, users will get Gateway errors in Nginx, because PHP-FPM could not spin up enough processes to handle the traffic and eventually fails when it cannot queues up requests to fulfill.


*** xDebug
    Here we disable xDebug and see how it makes our application a bit faster!
    It's pretty simple, there's a built in tool for it on Ubuntu/Debian servers.
    =sudo phpdismod xdebug=

*** Opcache
    Opcache is good(great)! CPU-usage saver. It does, however, come with a caveat:
    We're used to being able to change PHP files on the fly, and seeing the changes take effect immediately. However, when we enable opcache, we need to reload php-fpm every time we make code changes. Reloading or restarting php-fpm tells Opcache to refresh its cache.
    So, this is good to use when you're not changing code in production, and when you have a process set for deployment that can reload PHP-FPM after code is updated.

** Making an App

*** A New App
    All we do here is start a new Laravel application, which we'll use for the rest of the series to show how to scale out our infrastrure.

*** Sending Mail

** Queues
*** Database Queue Driver
   Queues
   All queue systems have three components.
   1. Code pushing job into a queue system (via a queue driver).
   2. A queue system running that collects and dispatches jobs.
   3. Queue workers consuming jobs and doing work on them.


*** UX and VueJS
   Queues are great, but there ary many times where we may leave users wondering "did that things I just clicked work?". We often need a way to let users know that there's a job in-queue and waiting to happen. To properly do this, we need a way to make it obvious they are waiting for something, and hopefully device a way to let them know when an action is finished.
   We'll see how we can do this with some VueJS and Pusher to update users in real-time.

*** Integrating Pusher
   So, we can set a button to show when a queue job is fired and is in-process. However, we don't have a way to update the user when a job is complete. To do this, we need 2-way communication. That's something we can get using websockets. Pusher is great for this.

*** Tracking Tasks

*** Database Queue Limitations

** Redis Queue
   Redis is the easiest queue driver in Laravel to use. Changes to Redis's job state are atomic and shouldn't create race conditions or deadlocks like you could potentially get with the database driver.
   Redis-based queues are basically just limited to the available memory of Redis itself (how much RAM is avaiable to use).

*** Laravel Horizon

*** SQS Queue

*** SQS and Wait Time

*** Queue Priority and Segmenting.

*** Queue in Production.
